{"version":3,"sources":["../node_modules/js-binarypack/lib/bufferbuilder.js","../node_modules/js-binarypack/lib/binarypack.js","adapter.ts","util.ts","../node_modules/eventemitter3/index.js","logger.ts","enums.ts","socket.ts","../node_modules/reliable/lib/util.js","../node_modules/reliable/lib/reliable.js","negotiator.ts","baseconnection.ts","mediaconnection.ts","dataconnection.ts","api.ts","peer.ts","exports.ts"],"names":[],"mappings":"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","file":"peerjs.min.js","sourceRoot":"../lib","sourcesContent":["var binaryFeatures = {};\r\nbinaryFeatures.useBlobBuilder = (function(){\r\n  try {\r\n    new Blob([]);\r\n    return false;\r\n  } catch (e) {\r\n    return true;\r\n  }\r\n})();\r\n\r\nbinaryFeatures.useArrayBufferView = !binaryFeatures.useBlobBuilder && (function(){\r\n  try {\r\n    return (new Blob([new Uint8Array([])])).size === 0;\r\n  } catch (e) {\r\n    return true;\r\n  }\r\n})();\r\n\r\nmodule.exports.binaryFeatures = binaryFeatures;\r\nvar BlobBuilder = module.exports.BlobBuilder;\r\nif (typeof window != 'undefined') {\r\n  BlobBuilder = module.exports.BlobBuilder = window.WebKitBlobBuilder ||\r\n    window.MozBlobBuilder || window.MSBlobBuilder || window.BlobBuilder;\r\n}\r\n\r\nfunction BufferBuilder(){\r\n  this._pieces = [];\r\n  this._parts = [];\r\n}\r\n\r\nBufferBuilder.prototype.append = function(data) {\r\n  if(typeof data === 'number') {\r\n    this._pieces.push(data);\r\n  } else {\r\n    this.flush();\r\n    this._parts.push(data);\r\n  }\r\n};\r\n\r\nBufferBuilder.prototype.flush = function() {\r\n  if (this._pieces.length > 0) {\r\n    var buf = new Uint8Array(this._pieces);\r\n    if(!binaryFeatures.useArrayBufferView) {\r\n      buf = buf.buffer;\r\n    }\r\n    this._parts.push(buf);\r\n    this._pieces = [];\r\n  }\r\n};\r\n\r\nBufferBuilder.prototype.getBuffer = function() {\r\n  this.flush();\r\n  if(binaryFeatures.useBlobBuilder) {\r\n    var builder = new BlobBuilder();\r\n    for(var i = 0, ii = this._parts.length; i < ii; i++) {\r\n      builder.append(this._parts[i]);\r\n    }\r\n    return builder.getBlob();\r\n  } else {\r\n    return new Blob(this._parts);\r\n  }\r\n};\r\n\r\nmodule.exports.BufferBuilder = BufferBuilder;\r\n","var BufferBuilder = require('./bufferbuilder').BufferBuilder;\r\nvar binaryFeatures = require('./bufferbuilder').binaryFeatures;\r\n\r\nvar BinaryPack = {\r\n  unpack: function(data){\r\n    var unpacker = new Unpacker(data);\r\n    return unpacker.unpack();\r\n  },\r\n  pack: function(data){\r\n    var packer = new Packer();\r\n    packer.pack(data);\r\n    var buffer = packer.getBuffer();\r\n    return buffer;\r\n  }\r\n};\r\n\r\nmodule.exports = BinaryPack;\r\n\r\nfunction Unpacker (data){\r\n  // Data is ArrayBuffer\r\n  this.index = 0;\r\n  this.dataBuffer = data;\r\n  this.dataView = new Uint8Array(this.dataBuffer);\r\n  this.length = this.dataBuffer.byteLength;\r\n}\r\n\r\nUnpacker.prototype.unpack = function(){\r\n  var type = this.unpack_uint8();\r\n  if (type < 0x80){\r\n    var positive_fixnum = type;\r\n    return positive_fixnum;\r\n  } else if ((type ^ 0xe0) < 0x20){\r\n    var negative_fixnum = (type ^ 0xe0) - 0x20;\r\n    return negative_fixnum;\r\n  }\r\n  var size;\r\n  if ((size = type ^ 0xa0) <= 0x0f){\r\n    return this.unpack_raw(size);\r\n  } else if ((size = type ^ 0xb0) <= 0x0f){\r\n    return this.unpack_string(size);\r\n  } else if ((size = type ^ 0x90) <= 0x0f){\r\n    return this.unpack_array(size);\r\n  } else if ((size = type ^ 0x80) <= 0x0f){\r\n    return this.unpack_map(size);\r\n  }\r\n  switch(type){\r\n    case 0xc0:\r\n      return null;\r\n    case 0xc1:\r\n      return undefined;\r\n    case 0xc2:\r\n      return false;\r\n    case 0xc3:\r\n      return true;\r\n    case 0xca:\r\n      return this.unpack_float();\r\n    case 0xcb:\r\n      return this.unpack_double();\r\n    case 0xcc:\r\n      return this.unpack_uint8();\r\n    case 0xcd:\r\n      return this.unpack_uint16();\r\n    case 0xce:\r\n      return this.unpack_uint32();\r\n    case 0xcf:\r\n      return this.unpack_uint64();\r\n    case 0xd0:\r\n      return this.unpack_int8();\r\n    case 0xd1:\r\n      return this.unpack_int16();\r\n    case 0xd2:\r\n      return this.unpack_int32();\r\n    case 0xd3:\r\n      return this.unpack_int64();\r\n    case 0xd4:\r\n      return undefined;\r\n    case 0xd5:\r\n      return undefined;\r\n    case 0xd6:\r\n      return undefined;\r\n    case 0xd7:\r\n      return undefined;\r\n    case 0xd8:\r\n      size = this.unpack_uint16();\r\n      return this.unpack_string(size);\r\n    case 0xd9:\r\n      size = this.unpack_uint32();\r\n      return this.unpack_string(size);\r\n    case 0xda:\r\n      size = this.unpack_uint16();\r\n      return this.unpack_raw(size);\r\n    case 0xdb:\r\n      size = this.unpack_uint32();\r\n      return this.unpack_raw(size);\r\n    case 0xdc:\r\n      size = this.unpack_uint16();\r\n      return this.unpack_array(size);\r\n    case 0xdd:\r\n      size = this.unpack_uint32();\r\n      return this.unpack_array(size);\r\n    case 0xde:\r\n      size = this.unpack_uint16();\r\n      return this.unpack_map(size);\r\n    case 0xdf:\r\n      size = this.unpack_uint32();\r\n      return this.unpack_map(size);\r\n  }\r\n}\r\n\r\nUnpacker.prototype.unpack_uint8 = function(){\r\n  var byte = this.dataView[this.index] & 0xff;\r\n  this.index++;\r\n  return byte;\r\n};\r\n\r\nUnpacker.prototype.unpack_uint16 = function(){\r\n  var bytes = this.read(2);\r\n  var uint16 =\r\n    ((bytes[0] & 0xff) * 256) + (bytes[1] & 0xff);\r\n  this.index += 2;\r\n  return uint16;\r\n}\r\n\r\nUnpacker.prototype.unpack_uint32 = function(){\r\n  var bytes = this.read(4);\r\n  var uint32 =\r\n     ((bytes[0]  * 256 +\r\n       bytes[1]) * 256 +\r\n       bytes[2]) * 256 +\r\n       bytes[3];\r\n  this.index += 4;\r\n  return uint32;\r\n}\r\n\r\nUnpacker.prototype.unpack_uint64 = function(){\r\n  var bytes = this.read(8);\r\n  var uint64 =\r\n   ((((((bytes[0]  * 256 +\r\n       bytes[1]) * 256 +\r\n       bytes[2]) * 256 +\r\n       bytes[3]) * 256 +\r\n       bytes[4]) * 256 +\r\n       bytes[5]) * 256 +\r\n       bytes[6]) * 256 +\r\n       bytes[7];\r\n  this.index += 8;\r\n  return uint64;\r\n}\r\n\r\n\r\nUnpacker.prototype.unpack_int8 = function(){\r\n  var uint8 = this.unpack_uint8();\r\n  return (uint8 < 0x80 ) ? uint8 : uint8 - (1 << 8);\r\n};\r\n\r\nUnpacker.prototype.unpack_int16 = function(){\r\n  var uint16 = this.unpack_uint16();\r\n  return (uint16 < 0x8000 ) ? uint16 : uint16 - (1 << 16);\r\n}\r\n\r\nUnpacker.prototype.unpack_int32 = function(){\r\n  var uint32 = this.unpack_uint32();\r\n  return (uint32 < Math.pow(2, 31) ) ? uint32 :\r\n    uint32 - Math.pow(2, 32);\r\n}\r\n\r\nUnpacker.prototype.unpack_int64 = function(){\r\n  var uint64 = this.unpack_uint64();\r\n  return (uint64 < Math.pow(2, 63) ) ? uint64 :\r\n    uint64 - Math.pow(2, 64);\r\n}\r\n\r\nUnpacker.prototype.unpack_raw = function(size){\r\n  if ( this.length < this.index + size){\r\n    throw new Error('BinaryPackFailure: index is out of range'\r\n      + ' ' + this.index + ' ' + size + ' ' + this.length);\r\n  }\r\n  var buf = this.dataBuffer.slice(this.index, this.index + size);\r\n  this.index += size;\r\n\r\n    //buf = util.bufferToString(buf);\r\n\r\n  return buf;\r\n}\r\n\r\nUnpacker.prototype.unpack_string = function(size){\r\n  var bytes = this.read(size);\r\n  var i = 0, str = '', c, code;\r\n  while(i < size){\r\n    c = bytes[i];\r\n    if ( c < 128){\r\n      str += String.fromCharCode(c);\r\n      i++;\r\n    } else if ((c ^ 0xc0) < 32){\r\n      code = ((c ^ 0xc0) << 6) | (bytes[i+1] & 63);\r\n      str += String.fromCharCode(code);\r\n      i += 2;\r\n    } else {\r\n      code = ((c & 15) << 12) | ((bytes[i+1] & 63) << 6) |\r\n        (bytes[i+2] & 63);\r\n      str += String.fromCharCode(code);\r\n      i += 3;\r\n    }\r\n  }\r\n  this.index += size;\r\n  return str;\r\n}\r\n\r\nUnpacker.prototype.unpack_array = function(size){\r\n  var objects = new Array(size);\r\n  for(var i = 0; i < size ; i++){\r\n    objects[i] = this.unpack();\r\n  }\r\n  return objects;\r\n}\r\n\r\nUnpacker.prototype.unpack_map = function(size){\r\n  var map = {};\r\n  for(var i = 0; i < size ; i++){\r\n    var key  = this.unpack();\r\n    var value = this.unpack();\r\n    map[key] = value;\r\n  }\r\n  return map;\r\n}\r\n\r\nUnpacker.prototype.unpack_float = function(){\r\n  var uint32 = this.unpack_uint32();\r\n  var sign = uint32 >> 31;\r\n  var exp  = ((uint32 >> 23) & 0xff) - 127;\r\n  var fraction = ( uint32 & 0x7fffff ) | 0x800000;\r\n  return (sign == 0 ? 1 : -1) *\r\n    fraction * Math.pow(2, exp - 23);\r\n}\r\n\r\nUnpacker.prototype.unpack_double = function(){\r\n  var h32 = this.unpack_uint32();\r\n  var l32 = this.unpack_uint32();\r\n  var sign = h32 >> 31;\r\n  var exp  = ((h32 >> 20) & 0x7ff) - 1023;\r\n  var hfrac = ( h32 & 0xfffff ) | 0x100000;\r\n  var frac = hfrac * Math.pow(2, exp - 20) +\r\n    l32   * Math.pow(2, exp - 52);\r\n  return (sign == 0 ? 1 : -1) * frac;\r\n}\r\n\r\nUnpacker.prototype.read = function(length){\r\n  var j = this.index;\r\n  if (j + length <= this.length) {\r\n    return this.dataView.subarray(j, j + length);\r\n  } else {\r\n    throw new Error('BinaryPackFailure: read index out of range');\r\n  }\r\n}\r\n\r\nfunction Packer(){\r\n  this.bufferBuilder = new BufferBuilder();\r\n}\r\n\r\nPacker.prototype.getBuffer = function(){\r\n  return this.bufferBuilder.getBuffer();\r\n}\r\n\r\nPacker.prototype.pack = function(value){\r\n  var type = typeof(value);\r\n  if (type == 'string'){\r\n    this.pack_string(value);\r\n  } else if (type == 'number'){\r\n    if (Math.floor(value) === value){\r\n      this.pack_integer(value);\r\n    } else{\r\n      this.pack_double(value);\r\n    }\r\n  } else if (type == 'boolean'){\r\n    if (value === true){\r\n      this.bufferBuilder.append(0xc3);\r\n    } else if (value === false){\r\n      this.bufferBuilder.append(0xc2);\r\n    }\r\n  } else if (type == 'undefined'){\r\n    this.bufferBuilder.append(0xc0);\r\n  } else if (type == 'object'){\r\n    if (value === null){\r\n      this.bufferBuilder.append(0xc0);\r\n    } else {\r\n      var constructor = value.constructor;\r\n      if (constructor == Array){\r\n        this.pack_array(value);\r\n      } else if (constructor == Blob || constructor == File) {\r\n        this.pack_bin(value);\r\n      } else if (constructor == ArrayBuffer) {\r\n        if(binaryFeatures.useArrayBufferView) {\r\n          this.pack_bin(new Uint8Array(value));\r\n        } else {\r\n          this.pack_bin(value);\r\n        }\r\n      } else if ('BYTES_PER_ELEMENT' in value){\r\n        if(binaryFeatures.useArrayBufferView) {\r\n          this.pack_bin(new Uint8Array(value.buffer));\r\n        } else {\r\n          this.pack_bin(value.buffer);\r\n        }\r\n      } else if (constructor == Object){\r\n        this.pack_object(value);\r\n      } else if (constructor == Date){\r\n        this.pack_string(value.toString());\r\n      } else if (typeof value.toBinaryPack == 'function'){\r\n        this.bufferBuilder.append(value.toBinaryPack());\r\n      } else {\r\n        throw new Error('Type \"' + constructor.toString() + '\" not yet supported');\r\n      }\r\n    }\r\n  } else {\r\n    throw new Error('Type \"' + type + '\" not yet supported');\r\n  }\r\n  this.bufferBuilder.flush();\r\n}\r\n\r\n\r\nPacker.prototype.pack_bin = function(blob){\r\n  var length = blob.length || blob.byteLength || blob.size;\r\n  if (length <= 0x0f){\r\n    this.pack_uint8(0xa0 + length);\r\n  } else if (length <= 0xffff){\r\n    this.bufferBuilder.append(0xda) ;\r\n    this.pack_uint16(length);\r\n  } else if (length <= 0xffffffff){\r\n    this.bufferBuilder.append(0xdb);\r\n    this.pack_uint32(length);\r\n  } else{\r\n    throw new Error('Invalid length');\r\n  }\r\n  this.bufferBuilder.append(blob);\r\n}\r\n\r\nPacker.prototype.pack_string = function(str){\r\n  var length = utf8Length(str);\r\n\r\n  if (length <= 0x0f){\r\n    this.pack_uint8(0xb0 + length);\r\n  } else if (length <= 0xffff){\r\n    this.bufferBuilder.append(0xd8) ;\r\n    this.pack_uint16(length);\r\n  } else if (length <= 0xffffffff){\r\n    this.bufferBuilder.append(0xd9);\r\n    this.pack_uint32(length);\r\n  } else{\r\n    throw new Error('Invalid length');\r\n  }\r\n  this.bufferBuilder.append(str);\r\n}\r\n\r\nPacker.prototype.pack_array = function(ary){\r\n  var length = ary.length;\r\n  if (length <= 0x0f){\r\n    this.pack_uint8(0x90 + length);\r\n  } else if (length <= 0xffff){\r\n    this.bufferBuilder.append(0xdc)\r\n    this.pack_uint16(length);\r\n  } else if (length <= 0xffffffff){\r\n    this.bufferBuilder.append(0xdd);\r\n    this.pack_uint32(length);\r\n  } else{\r\n    throw new Error('Invalid length');\r\n  }\r\n  for(var i = 0; i < length ; i++){\r\n    this.pack(ary[i]);\r\n  }\r\n}\r\n\r\nPacker.prototype.pack_integer = function(num){\r\n  if ( -0x20 <= num && num <= 0x7f){\r\n    this.bufferBuilder.append(num & 0xff);\r\n  } else if (0x00 <= num && num <= 0xff){\r\n    this.bufferBuilder.append(0xcc);\r\n    this.pack_uint8(num);\r\n  } else if (-0x80 <= num && num <= 0x7f){\r\n    this.bufferBuilder.append(0xd0);\r\n    this.pack_int8(num);\r\n  } else if ( 0x0000 <= num && num <= 0xffff){\r\n    this.bufferBuilder.append(0xcd);\r\n    this.pack_uint16(num);\r\n  } else if (-0x8000 <= num && num <= 0x7fff){\r\n    this.bufferBuilder.append(0xd1);\r\n    this.pack_int16(num);\r\n  } else if ( 0x00000000 <= num && num <= 0xffffffff){\r\n    this.bufferBuilder.append(0xce);\r\n    this.pack_uint32(num);\r\n  } else if (-0x80000000 <= num && num <= 0x7fffffff){\r\n    this.bufferBuilder.append(0xd2);\r\n    this.pack_int32(num);\r\n  } else if (-0x8000000000000000 <= num && num <= 0x7FFFFFFFFFFFFFFF){\r\n    this.bufferBuilder.append(0xd3);\r\n    this.pack_int64(num);\r\n  } else if (0x0000000000000000 <= num && num <= 0xFFFFFFFFFFFFFFFF){\r\n    this.bufferBuilder.append(0xcf);\r\n    this.pack_uint64(num);\r\n  } else{\r\n    throw new Error('Invalid integer');\r\n  }\r\n}\r\n\r\nPacker.prototype.pack_double = function(num){\r\n  var sign = 0;\r\n  if (num < 0){\r\n    sign = 1;\r\n    num = -num;\r\n  }\r\n  var exp  = Math.floor(Math.log(num) / Math.LN2);\r\n  var frac0 = num / Math.pow(2, exp) - 1;\r\n  var frac1 = Math.floor(frac0 * Math.pow(2, 52));\r\n  var b32   = Math.pow(2, 32);\r\n  var h32 = (sign << 31) | ((exp+1023) << 20) |\r\n      (frac1 / b32) & 0x0fffff;\r\n  var l32 = frac1 % b32;\r\n  this.bufferBuilder.append(0xcb);\r\n  this.pack_int32(h32);\r\n  this.pack_int32(l32);\r\n}\r\n\r\nPacker.prototype.pack_object = function(obj){\r\n  var keys = Object.keys(obj);\r\n  var length = keys.length;\r\n  if (length <= 0x0f){\r\n    this.pack_uint8(0x80 + length);\r\n  } else if (length <= 0xffff){\r\n    this.bufferBuilder.append(0xde);\r\n    this.pack_uint16(length);\r\n  } else if (length <= 0xffffffff){\r\n    this.bufferBuilder.append(0xdf);\r\n    this.pack_uint32(length);\r\n  } else{\r\n    throw new Error('Invalid length');\r\n  }\r\n  for(var prop in obj){\r\n    if (obj.hasOwnProperty(prop)){\r\n      this.pack(prop);\r\n      this.pack(obj[prop]);\r\n    }\r\n  }\r\n}\r\n\r\nPacker.prototype.pack_uint8 = function(num){\r\n  this.bufferBuilder.append(num);\r\n}\r\n\r\nPacker.prototype.pack_uint16 = function(num){\r\n  this.bufferBuilder.append(num >> 8);\r\n  this.bufferBuilder.append(num & 0xff);\r\n}\r\n\r\nPacker.prototype.pack_uint32 = function(num){\r\n  var n = num & 0xffffffff;\r\n  this.bufferBuilder.append((n & 0xff000000) >>> 24);\r\n  this.bufferBuilder.append((n & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((n & 0x0000ff00) >>>  8);\r\n  this.bufferBuilder.append((n & 0x000000ff));\r\n}\r\n\r\nPacker.prototype.pack_uint64 = function(num){\r\n  var high = num / Math.pow(2, 32);\r\n  var low  = num % Math.pow(2, 32);\r\n  this.bufferBuilder.append((high & 0xff000000) >>> 24);\r\n  this.bufferBuilder.append((high & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((high & 0x0000ff00) >>>  8);\r\n  this.bufferBuilder.append((high & 0x000000ff));\r\n  this.bufferBuilder.append((low  & 0xff000000) >>> 24);\r\n  this.bufferBuilder.append((low  & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((low  & 0x0000ff00) >>>  8);\r\n  this.bufferBuilder.append((low  & 0x000000ff));\r\n}\r\n\r\nPacker.prototype.pack_int8 = function(num){\r\n  this.bufferBuilder.append(num & 0xff);\r\n}\r\n\r\nPacker.prototype.pack_int16 = function(num){\r\n  this.bufferBuilder.append((num & 0xff00) >> 8);\r\n  this.bufferBuilder.append(num & 0xff);\r\n}\r\n\r\nPacker.prototype.pack_int32 = function(num){\r\n  this.bufferBuilder.append((num >>> 24) & 0xff);\r\n  this.bufferBuilder.append((num & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((num & 0x0000ff00) >>> 8);\r\n  this.bufferBuilder.append((num & 0x000000ff));\r\n}\r\n\r\nPacker.prototype.pack_int64 = function(num){\r\n  var high = Math.floor(num / Math.pow(2, 32));\r\n  var low  = num % Math.pow(2, 32);\r\n  this.bufferBuilder.append((high & 0xff000000) >>> 24);\r\n  this.bufferBuilder.append((high & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((high & 0x0000ff00) >>>  8);\r\n  this.bufferBuilder.append((high & 0x000000ff));\r\n  this.bufferBuilder.append((low  & 0xff000000) >>> 24);\r\n  this.bufferBuilder.append((low  & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((low  & 0x0000ff00) >>>  8);\r\n  this.bufferBuilder.append((low  & 0x000000ff));\r\n}\r\n\r\nfunction _utf8Replace(m){\r\n  var code = m.charCodeAt(0);\r\n\r\n  if(code <= 0x7ff) return '00';\r\n  if(code <= 0xffff) return '000';\r\n  if(code <= 0x1fffff) return '0000';\r\n  if(code <= 0x3ffffff) return '00000';\r\n  return '000000';\r\n}\r\n\r\nfunction utf8Length(str){\r\n  if (str.length > 600) {\r\n    // Blob method faster for large strings\r\n    return (new Blob([str])).size;\r\n  } else {\r\n    return str.replace(/[^\\u0000-\\u007F]/g, _utf8Replace).length;\r\n  }\r\n}\r\n","import { adapter as _ } from \"webrtc-adapter\";\n\nexport const RTCSessionDescription =\n  // @ts-ignore\n  window.RTCSessionDescription || window.mozRTCSessionDescription;\nexport const RTCPeerConnection =\n  // @ts-ignore\n  window.RTCPeerConnection ||\n  // @ts-ignore\n  window.mozRTCPeerConnection ||\n  // @ts-ignore\n  window.webkitRTCPeerConnection;\nexport const RTCIceCandidate =\n  // @ts-ignore\n  window.RTCIceCandidate || window.mozRTCIceCandidate;\n","import * as BinaryPack from \"js-binarypack\";\nimport { RTCPeerConnection } from \"./adapter\";\n\nconst DEFAULT_CONFIG = {\n  iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\n  sdpSemantics: \"unified-plan\"\n};\n\nexport class util {\n  static noop(): void { }\n\n  static readonly CLOUD_HOST = \"0.peerjs.com\";\n  static readonly CLOUD_PORT = 443;\n\n  // Browsers that need chunking:\n  static readonly chunkedBrowsers = { Chrome: 1 };\n  static readonly chunkedMTU = 16300; // The original 60000 bytes setting does not work when sending data from Firefox to Chrome, which is \"cut off\" after 16384 bytes and delivered individually.\n\n  // Returns browser-agnostic default config\n  static readonly defaultConfig = DEFAULT_CONFIG;\n\n  // Returns the current browser.\n  static readonly browser: string = (function (global) {\n    // @ts-ignore\n    if (global.mozRTCPeerConnection) {\n      return \"Firefox\";\n    }\n    // @ts-ignore\n    if (global.webkitRTCPeerConnection) {\n      return \"Chrome\";\n    }\n\n    if (global.RTCPeerConnection) {\n      return \"Supported\";\n    }\n\n    return \"Unsupported\";\n  })(window);\n\n  // Lists which features are supported\n  static readonly supports = (function () {\n    if (typeof RTCPeerConnection === \"undefined\") {\n      return {};\n    }\n\n    let data = true;\n    let audioVideo = true;\n\n    let binaryBlob = false;\n    let sctp = false;\n    // @ts-ignore\n    const onnegotiationneeded = !!window.webkitRTCPeerConnection;\n\n    let pc, dc;\n\n    try {\n      pc = new RTCPeerConnection(DEFAULT_CONFIG, {\n        optional: [{ RtpDataChannels: true }]\n      });\n    } catch (e) {\n      data = false;\n      audioVideo = false;\n    }\n\n    if (data) {\n      try {\n        dc = pc.createDataChannel(\"_PEERJSTEST\");\n      } catch (e) {\n        data = false;\n      }\n    }\n\n    if (data) {\n      // Binary test\n      try {\n        dc.binaryType = \"blob\";\n        binaryBlob = true;\n      } catch (e) { }\n\n      // Reliable test.\n      // Unfortunately Chrome is a bit unreliable about whether or not they\n      // support reliable.\n      const reliablePC = new RTCPeerConnection(DEFAULT_CONFIG, {});\n      try {\n        const reliableDC = reliablePC.createDataChannel(\n          \"_PEERJSRELIABLETEST\",\n          {}\n        );\n        sctp = reliableDC.ordered;\n      } catch (e) { }\n      reliablePC.close();\n    }\n\n    // FIXME: not really the best check...\n    if (audioVideo) {\n      audioVideo = !!pc.addStream;\n    }\n\n    if (pc) {\n      pc.close();\n    }\n\n    return {\n      audioVideo: audioVideo,\n      data: data,\n      binaryBlob: binaryBlob,\n      binary: sctp, // deprecated; sctp implies binary support.\n      reliable: sctp, // deprecated; sctp implies reliable data.\n      sctp: sctp,\n      onnegotiationneeded: onnegotiationneeded\n    };\n  })();\n\n  // Ensure alphanumeric ids\n  static validateId(id: string): boolean {\n    // Allow empty ids\n    return !id || /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.test(id);\n  }\n\n  static pack = BinaryPack.pack;\n  static unpack = BinaryPack.unpack;\n\n  // Binary stuff\n\n  private static _dataCount = 1;\n\n  // chunks a blob.\n  static chunk(bl: Blob): any[] {\n    const chunks = [];\n    const size = bl.size;\n    const total = Math.ceil(size / util.chunkedMTU);\n\n    let index;\n    let start = (index = 0);\n\n    while (start < size) {\n      const end = Math.min(size, start + util.chunkedMTU);\n      const b = bl.slice(start, end);\n\n      const chunk = {\n        __peerData: this._dataCount,\n        n: index,\n        data: b,\n        total: total\n      };\n\n      chunks.push(chunk);\n\n      start = end;\n      index++;\n    }\n\n    this._dataCount++;\n\n    return chunks;\n  }\n\n  static blobToArrayBuffer(blob: Blob, cb: (arg: any) => void): void {\n    const fr = new FileReader();\n\n    fr.onload = function (evt) {\n      // @ts-ignore\n      cb(evt.target.result);\n    };\n\n    fr.readAsArrayBuffer(blob);\n  }\n\n  static blobToBinaryString(blob: Blob, cb: (arg: any) => void): void {\n    const fr = new FileReader();\n\n    fr.onload = function (evt) {\n      // @ts-ignore\n      cb(evt.target.result);\n    };\n\n    fr.readAsBinaryString(blob);\n  }\n\n  static binaryStringToArrayBuffer(binary): ArrayBuffer | SharedArrayBuffer {\n    let byteArray = new Uint8Array(binary.length);\n\n    for (let i = 0; i < binary.length; i++) {\n      byteArray[i] = binary.charCodeAt(i) & 0xff;\n    }\n\n    return byteArray.buffer;\n  }\n\n  static randomToken(): string {\n    return Math.random()\n      .toString(36)\n      .substr(2);\n  }\n\n  static isSecure(): boolean {\n    return location.protocol === \"https:\";\n  }\n}\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","const LOG_PREFIX = 'PeerJS: ';\n\n/*\nPrints log messages depending on the debug level passed in. Defaults to 0.\n0  Prints no logs.\n1  Prints only errors.\n2  Prints errors and warnings.\n3  Prints all logs.\n*/\nexport enum LogLevel {\n    Disabled,\n    Errors,\n    Warnings,\n    All\n}\n\nclass Logger {\n    private _logLevel = LogLevel.Disabled;\n\n    get logLevel(): LogLevel { return this._logLevel; }\n\n    set logLevel(logLevel: LogLevel) { this._logLevel = logLevel; }\n\n    log(...args) {\n        if (this._logLevel >= LogLevel.All) {\n            this._print(LogLevel.All, ...args);\n        }\n    }\n\n    warn(...args) {\n        if (this._logLevel >= LogLevel.Warnings) {\n            this._print(LogLevel.Warnings, ...args);\n        }\n    }\n\n    error(...args) {\n        if (this._logLevel >= LogLevel.Errors) {\n            this._print(LogLevel.Errors, ...args);\n        }\n    }\n\n    setLogFunction(fn: (logLevel: LogLevel, ..._) => void): void {\n        this._print = fn;\n    }\n\n    private _print(logLevel: LogLevel, ...rest): void {\n        const copy = [LOG_PREFIX, ...rest];\n\n        for (let i in copy) {\n            if (copy[i] instanceof Error) {\n                copy[i] = \"(\" + copy[i].name + \") \" + copy[i].message;\n\n            }\n        }\n\n        if (logLevel >= LogLevel.All) {\n            console.log(...copy);\n        } else if (logLevel >= LogLevel.Warnings) {\n            console.warn(\"WARNING\", ...copy);\n        } else if (logLevel >= LogLevel.Errors) {\n            console.error(\"ERROR\", ...copy);\n        }\n    }\n}\n\nexport default new Logger();","export enum ConnectionEventType {\n  Open = \"open\",\n  Stream = \"stream\",\n  Data = \"data\",\n  Close = \"close\",\n  Error = \"error\",\n  IceStateChanged = \"iceStateChanged\"\n}\n\nexport enum ConnectionType {\n  Data = \"data\",\n  Media = \"media\"\n}\n\nexport enum PeerEventType {\n  Open = \"open\",\n  Close = \"close\",\n  Connection = \"connection\",\n  Call = \"call\",\n  Disconnected = \"disconnected\",\n  Error = \"error\"\n}\n\nexport enum PeerErrorType {\n  BrowserIncompatible = \"browser-incompatible\",\n  Disconnected = \"disconnected\",\n  InvalidID = \"invalid-id\",\n  InvalidKey = \"invalid-key\",\n  Network = \"network\",\n  PeerUnavailable = \"peer-unavailable\",\n  SslUnavailable = \"ssl-unavailable\",\n  ServerError = \"server-error\",\n  SocketError = \"socket-error\",\n  SocketClosed = \"socket-closed\",\n  UnavailableID = \"unavailable-id\",\n  WebRTC = \"webrtc\"\n}\n\nexport enum SerializationType {\n  Binary = \"binary\",\n  BinaryUTF8 = \"binary-utf8\",\n  JSON = \"json\"\n}\n\nexport enum SocketEventType {\n  Message = \"message\",\n  Disconnected = \"disconnected\",\n  Error = \"error\",\n  Close = \"close\"\n}\n\nexport enum ServerMessageType {\n  Heartbeat = \"HEARTBEAT\",\n  Candidate = \"CANDIDATE\",\n  Offer = \"OFFER\",\n  Answer = \"ANSWER\",\n  Open = \"OPEN\", // The connection to the server is open.\n  Error = \"ERROR\", // Server error.\n  IdTaken = \"ID-TAKEN\", // The selected ID is taken.\n  InvalidKey = \"INVALID-KEY\", // The given API key cannot be found.\n  Leave = \"LEAVE\", // Another peer has closed its connection to this peer.\n  Expire = \"EXPIRE\" // The offer sent to a peer has expired without response.\n\n}","import { EventEmitter } from \"eventemitter3\";\nimport logger from \"./logger\";\nimport { SocketEventType, ServerMessageType } from \"./enums\";\n\n/**\n * An abstraction on top of WebSockets to provide fastest\n * possible connection for peers.\n */\nexport class Socket extends EventEmitter {\n  private readonly WEB_SOCKET_PING_INTERVAL = 20000;//ms\n\n  private _disconnected = false;\n  private _id: string;\n  private _messagesQueue: Array<any> = [];\n  private _wsUrl: string;\n  private _socket: WebSocket;\n  private _wsPingTimer: any;\n\n  constructor(\n    secure: any,\n    host: string,\n    port: number,\n    path: string,\n    key: string,\n  ) {\n    super();\n\n    const wsProtocol = secure ? \"wss://\" : \"ws://\";\n\n    this._wsUrl = wsProtocol + host + \":\" + port + path + \"peerjs?key=\" + key;\n  }\n\n  /** Check in with ID or get one from server. */\n  start(id: string, token: string): void {\n    this._id = id;\n\n    this._wsUrl += \"&id=\" + id + \"&token=\" + token;\n\n    this._startWebSocket();\n  }\n\n  /** Start up websocket communications. */\n  private _startWebSocket(): void {\n    if (this._socket) {\n      return;\n    }\n\n    this._socket = new WebSocket(this._wsUrl);\n\n    this._socket.onmessage = (event) => {\n      let data;\n\n      try {\n        data = JSON.parse(event.data);\n      } catch (e) {\n        logger.log(\"Invalid server message\", event.data);\n        return;\n      }\n\n      this.emit(SocketEventType.Message, data);\n    };\n\n    this._socket.onclose = (event) => {\n      logger.log(\"Socket closed.\", event);;\n\n      this._disconnected = true;\n      clearTimeout(this._wsPingTimer);\n\n      this.emit(SocketEventType.Disconnected);\n    };\n\n    // Take care of the queue of connections if necessary and make sure Peer knows\n    // socket is open.\n    this._socket.onopen = () => {\n      if (this._disconnected) return;\n\n      this._sendQueuedMessages();\n\n      logger.log(\"Socket open\");\n\n      this._scheduleHeartbeat();\n    };\n  }\n\n  private _scheduleHeartbeat(): void {\n    this._wsPingTimer = setTimeout(() => { this._sendHeartbeat() }, this.WEB_SOCKET_PING_INTERVAL);\n  }\n\n  private _sendHeartbeat(): void {\n    if (!this._wsOpen()) {\n      logger.log(`Cannot send heartbeat, because socket closed`);\n      return;\n    }\n\n    const message = JSON.stringify({ type: ServerMessageType.Heartbeat });\n\n    this._socket.send(message);\n\n    this._scheduleHeartbeat();\n  }\n\n  /** Is the websocket currently open? */\n  private _wsOpen(): boolean {\n    return !!this._socket && this._socket.readyState == 1;\n  }\n\n  /** Send queued messages. */\n  private _sendQueuedMessages(): void {\n    //Create copy of queue and clear it,\n    //because send method push the message back to queue if smth will go wrong\n    const copiedQueue = [...this._messagesQueue];\n    this._messagesQueue = [];\n\n    for (const message of copiedQueue) {\n      this.send(message);\n    }\n  }\n\n  /** Exposed send for DC & Peer. */\n  send(data: any): void {\n    if (this._disconnected) {\n      return;\n    }\n\n    // If we didn't get an ID yet, we can't yet send anything so we should queue\n    // up these messages.\n    if (!this._id) {\n      this._messagesQueue.push(data);\n      return;\n    }\n\n    if (!data.type) {\n      this.emit(SocketEventType.Error, \"Invalid message\");\n      return;\n    }\n\n    if (!this._wsOpen()) {\n      return;\n    }\n\n    const message = JSON.stringify(data);\n\n    this._socket.send(message);\n  }\n\n  close(): void {\n    if (!this._disconnected && !!this._socket) {\n      this._socket.close();\n      this._disconnected = true;\n      clearTimeout(this._wsPingTimer);\n    }\n  }\n}\n","var BinaryPack = require('js-binarypack');\n\nvar util = {\n  debug: false,\n  \n  inherits: function(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  },\n  extend: function(dest, source) {\n    for(var key in source) {\n      if(source.hasOwnProperty(key)) {\n        dest[key] = source[key];\n      }\n    }\n    return dest;\n  },\n  pack: BinaryPack.pack,\n  unpack: BinaryPack.unpack,\n  \n  log: function () {\n    if (util.debug) {\n      var copy = [];\n      for (var i = 0; i < arguments.length; i++) {\n        copy[i] = arguments[i];\n      }\n      copy.unshift('Reliable: ');\n      console.log.apply(console, copy);\n    }\n  },\n\n  setZeroTimeout: (function(global) {\n    var timeouts = [];\n    var messageName = 'zero-timeout-message';\n\n    // Like setTimeout, but only takes a function argument.\t There's\n    // no time argument (always zero) and no arguments (you have to\n    // use a closure).\n    function setZeroTimeoutPostMessage(fn) {\n      timeouts.push(fn);\n      global.postMessage(messageName, '*');\n    }\t\t\n\n    function handleMessage(event) {\n      if (event.source == global && event.data == messageName) {\n        if (event.stopPropagation) {\n          event.stopPropagation();\n        }\n        if (timeouts.length) {\n          timeouts.shift()();\n        }\n      }\n    }\n    if (global.addEventListener) {\n      global.addEventListener('message', handleMessage, true);\n    } else if (global.attachEvent) {\n      global.attachEvent('onmessage', handleMessage);\n    }\n    return setZeroTimeoutPostMessage;\n  }(this)),\n  \n  blobToArrayBuffer: function(blob, cb){\n    var fr = new FileReader();\n    fr.onload = function(evt) {\n      cb(evt.target.result);\n    };\n    fr.readAsArrayBuffer(blob);\n  },\n  blobToBinaryString: function(blob, cb){\n    var fr = new FileReader();\n    fr.onload = function(evt) {\n      cb(evt.target.result);\n    };\n    fr.readAsBinaryString(blob);\n  },\n  binaryStringToArrayBuffer: function(binary) {\n    var byteArray = new Uint8Array(binary.length);\n    for (var i = 0; i < binary.length; i++) {\n      byteArray[i] = binary.charCodeAt(i) & 0xff;\n    }\n    return byteArray.buffer;\n  },\n  randomToken: function () {\n    return Math.random().toString(36).substr(2);\n  }\n};\n\nmodule.exports = util;\n","var util = require('./util');\n\n/**\n * Reliable transfer for Chrome Canary DataChannel impl.\n * Author: @michellebu\n */\nfunction Reliable(dc, debug) {\n  if (!(this instanceof Reliable)) return new Reliable(dc);\n  this._dc = dc;\n\n  util.debug = debug;\n\n  // Messages sent/received so far.\n  // id: { ack: n, chunks: [...] }\n  this._outgoing = {};\n  // id: { ack: ['ack', id, n], chunks: [...] }\n  this._incoming = {};\n  this._received = {};\n\n  // Window size.\n  this._window = 1000;\n  // MTU.\n  this._mtu = 500;\n  // Interval for setInterval. In ms.\n  this._interval = 0;\n\n  // Messages sent.\n  this._count = 0;\n\n  // Outgoing message queue.\n  this._queue = [];\n\n  this._setupDC();\n};\n\n// Send a message reliably.\nReliable.prototype.send = function(msg) {\n  // Determine if chunking is necessary.\n  var bl = util.pack(msg);\n  if (bl.size < this._mtu) {\n    this._handleSend(['no', bl]);\n    return;\n  }\n\n  this._outgoing[this._count] = {\n    ack: 0,\n    chunks: this._chunk(bl)\n  };\n\n  if (util.debug) {\n    this._outgoing[this._count].timer = new Date();\n  }\n\n  // Send prelim window.\n  this._sendWindowedChunks(this._count);\n  this._count += 1;\n};\n\n// Set up interval for processing queue.\nReliable.prototype._setupInterval = function() {\n  // TODO: fail gracefully.\n\n  var self = this;\n  this._timeout = setInterval(function() {\n    // FIXME: String stuff makes things terribly async.\n    var msg = self._queue.shift();\n    if (msg._multiple) {\n      for (var i = 0, ii = msg.length; i < ii; i += 1) {\n        self._intervalSend(msg[i]);\n      }\n    } else {\n      self._intervalSend(msg);\n    }\n  }, this._interval);\n};\n\nReliable.prototype._intervalSend = function(msg) {\n  var self = this;\n  msg = util.pack(msg);\n  util.blobToBinaryString(msg, function(str) {\n    self._dc.send(str);\n  });\n  if (self._queue.length === 0) {\n    clearTimeout(self._timeout);\n    self._timeout = null;\n    //self._processAcks();\n  }\n};\n\n// Go through ACKs to send missing pieces.\nReliable.prototype._processAcks = function() {\n  for (var id in this._outgoing) {\n    if (this._outgoing.hasOwnProperty(id)) {\n      this._sendWindowedChunks(id);\n    }\n  }\n};\n\n// Handle sending a message.\n// FIXME: Don't wait for interval time for all messages...\nReliable.prototype._handleSend = function(msg) {\n  var push = true;\n  for (var i = 0, ii = this._queue.length; i < ii; i += 1) {\n    var item = this._queue[i];\n    if (item === msg) {\n      push = false;\n    } else if (item._multiple && item.indexOf(msg) !== -1) {\n      push = false;\n    }\n  }\n  if (push) {\n    this._queue.push(msg);\n    if (!this._timeout) {\n      this._setupInterval();\n    }\n  }\n};\n\n// Set up DataChannel handlers.\nReliable.prototype._setupDC = function() {\n  // Handle various message types.\n  var self = this;\n  this._dc.onmessage = function(e) {\n    var msg = e.data;\n    var datatype = msg.constructor;\n    // FIXME: msg is String until binary is supported.\n    // Once that happens, this will have to be smarter.\n    if (datatype === String) {\n      var ab = util.binaryStringToArrayBuffer(msg);\n      msg = util.unpack(ab);\n      self._handleMessage(msg);\n    }\n  };\n};\n\n// Handles an incoming message.\nReliable.prototype._handleMessage = function(msg) {\n  var id = msg[1];\n  var idata = this._incoming[id];\n  var odata = this._outgoing[id];\n  var data;\n  switch (msg[0]) {\n    // No chunking was done.\n    case 'no':\n      var message = id;\n      if (!!message) {\n        this.onmessage(util.unpack(message));\n      }\n      break;\n    // Reached the end of the message.\n    case 'end':\n      data = idata;\n\n      // In case end comes first.\n      this._received[id] = msg[2];\n\n      if (!data) {\n        break;\n      }\n\n      this._ack(id);\n      break;\n    case 'ack':\n      data = odata;\n      if (!!data) {\n        var ack = msg[2];\n        // Take the larger ACK, for out of order messages.\n        data.ack = Math.max(ack, data.ack);\n\n        // Clean up when all chunks are ACKed.\n        if (data.ack >= data.chunks.length) {\n          util.log('Time: ', new Date() - data.timer);\n          delete this._outgoing[id];\n        } else {\n          this._processAcks();\n        }\n      }\n      // If !data, just ignore.\n      break;\n    // Received a chunk of data.\n    case 'chunk':\n      // Create a new entry if none exists.\n      data = idata;\n      if (!data) {\n        var end = this._received[id];\n        if (end === true) {\n          break;\n        }\n        data = {\n          ack: ['ack', id, 0],\n          chunks: []\n        };\n        this._incoming[id] = data;\n      }\n\n      var n = msg[2];\n      var chunk = msg[3];\n      data.chunks[n] = new Uint8Array(chunk);\n\n      // If we get the chunk we're looking for, ACK for next missing.\n      // Otherwise, ACK the same N again.\n      if (n === data.ack[2]) {\n        this._calculateNextAck(id);\n      }\n      this._ack(id);\n      break;\n    default:\n      // Shouldn't happen, but would make sense for message to just go\n      // through as is.\n      this._handleSend(msg);\n      break;\n  }\n};\n\n// Chunks BL into smaller messages.\nReliable.prototype._chunk = function(bl) {\n  var chunks = [];\n  var size = bl.size;\n  var start = 0;\n  while (start < size) {\n    var end = Math.min(size, start + this._mtu);\n    var b = bl.slice(start, end);\n    var chunk = {\n      payload: b\n    }\n    chunks.push(chunk);\n    start = end;\n  }\n  util.log('Created', chunks.length, 'chunks.');\n  return chunks;\n};\n\n// Sends ACK N, expecting Nth blob chunk for message ID.\nReliable.prototype._ack = function(id) {\n  var ack = this._incoming[id].ack;\n\n  // if ack is the end value, then call _complete.\n  if (this._received[id] === ack[2]) {\n    this._complete(id);\n    this._received[id] = true;\n  }\n\n  this._handleSend(ack);\n};\n\n// Calculates the next ACK number, given chunks.\nReliable.prototype._calculateNextAck = function(id) {\n  var data = this._incoming[id];\n  var chunks = data.chunks;\n  for (var i = 0, ii = chunks.length; i < ii; i += 1) {\n    // This chunk is missing!!! Better ACK for it.\n    if (chunks[i] === undefined) {\n      data.ack[2] = i;\n      return;\n    }\n  }\n  data.ack[2] = chunks.length;\n};\n\n// Sends the next window of chunks.\nReliable.prototype._sendWindowedChunks = function(id) {\n  util.log('sendWindowedChunks for: ', id);\n  var data = this._outgoing[id];\n  var ch = data.chunks;\n  var chunks = [];\n  var limit = Math.min(data.ack + this._window, ch.length);\n  for (var i = data.ack; i < limit; i += 1) {\n    if (!ch[i].sent || i === data.ack) {\n      ch[i].sent = true;\n      chunks.push(['chunk', id, i, ch[i].payload]);\n    }\n  }\n  if (data.ack + this._window >= ch.length) {\n    chunks.push(['end', id, ch.length])\n  }\n  chunks._multiple = true;\n  this._handleSend(chunks);\n};\n\n// Puts together a message from chunks.\nReliable.prototype._complete = function(id) {\n  util.log('Completed called for', id);\n  var self = this;\n  var chunks = this._incoming[id].chunks;\n  var bl = new Blob(chunks);\n  util.blobToArrayBuffer(bl, function(ab) {\n    self.onmessage(util.unpack(ab));\n  });\n  delete this._incoming[id];\n};\n\n// Ups bandwidth limit on SDP. Meant to be called during offer/answer.\nReliable.higherBandwidthSDP = function(sdp) {\n  // AS stands for Application-Specific Maximum.\n  // Bandwidth number is in kilobits / sec.\n  // See RFC for more info: http://www.ietf.org/rfc/rfc2327.txt\n\n  // Chrome 31+ doesn't want us munging the SDP, so we'll let them have their\n  // way.\n  var version = navigator.appVersion.match(/Chrome\\/(.*?) /);\n  if (version) {\n    version = parseInt(version[1].split('.').shift());\n    if (version < 31) {\n      var parts = sdp.split('b=AS:30');\n      var replace = 'b=AS:102400'; // 100 Mbps\n      if (parts.length > 1) {\n        return parts[0] + replace + parts[1];\n      }\n    }\n  }\n\n  return sdp;\n};\n\n// Overwritten, typically.\nReliable.prototype.onmessage = function(msg) {};\n\nmodule.exports = Reliable;\n","import * as Reliable from \"reliable\";\nimport { util } from \"./util\";\nimport logger from \"./logger\";\nimport {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate\n} from \"./adapter\";\nimport { MediaConnection } from \"./mediaconnection\";\nimport { DataConnection } from \"./dataconnection\";\nimport { ConnectionType, PeerErrorType, ConnectionEventType, ServerMessageType } from \"./enums\";\nimport { BaseConnection } from \"./baseconnection\";\n\n/**\n * Manages all negotiations between Peers.\n */\nexport class Negotiator {\n  constructor(readonly connection: BaseConnection) { }\n\n  /** Returns a PeerConnection object set up correctly (for data, media). */\n  startConnection(options: any) {\n    const peerConnection = this._startPeerConnection();\n\n    // Set the connection's PC.\n    this.connection.peerConnection = peerConnection;\n\n    if (this.connection.type === ConnectionType.Media && options._stream) {\n      this._addTracksToConnection(options._stream, peerConnection);\n    }\n\n    // What do we need to do now?\n    if (options.originator) {\n      if (this.connection.type === ConnectionType.Data) {\n        const dataConnection = <DataConnection>this.connection;\n\n        let config = {};\n\n        if (!util.supports.sctp) {\n          config = { reliable: options.reliable };\n        }\n\n        const dataChannel = peerConnection.createDataChannel(\n          dataConnection.label,\n          config\n        );\n        dataConnection.initialize(dataChannel);\n      }\n\n      this._makeOffer();\n    } else {\n      this.handleSDP(\"OFFER\", options.sdp);\n    }\n  }\n\n  /** Start a PC. */\n  private _startPeerConnection(): RTCPeerConnection {\n    logger.log(\"Creating RTCPeerConnection.\");\n\n    let optional = {};\n\n    if (this.connection.type === ConnectionType.Data && !util.supports.sctp) {\n      optional = { optional: [{ RtpDataChannels: true }] };\n    } else if (this.connection.type === ConnectionType.Media) {\n      // Interop req for chrome.\n      optional = { optional: [{ DtlsSrtpKeyAgreement: true }] };\n    }\n\n    const peerConnection = new RTCPeerConnection(\n      this.connection.provider.options.config,\n      optional\n    );\n\n    this._setupListeners(peerConnection);\n\n    return peerConnection;\n  }\n\n  /** Set up various WebRTC listeners. */\n  private _setupListeners(\n    peerConnection: RTCPeerConnection\n  ) {\n    const peerId = this.connection.peer;\n    const connectionId = this.connection.connectionId;\n    const connectionType = this.connection.type;\n    const provider = this.connection.provider;\n\n    // ICE CANDIDATES.\n    logger.log(\"Listening for ICE candidates.\");\n\n    peerConnection.onicecandidate = (evt) => {\n      if (evt.candidate) {\n        logger.log(\"Received ICE candidates for:\", peerId);\n        provider.socket.send({\n          type: ServerMessageType.Candidate,\n          payload: {\n            candidate: evt.candidate,\n            type: connectionType,\n            connectionId: connectionId\n          },\n          dst: peerId\n        });\n      }\n    };\n\n    peerConnection.oniceconnectionstatechange = () => {\n      switch (peerConnection.iceConnectionState) {\n        case \"failed\":\n          logger.log(\n            \"iceConnectionState is failed, closing connections to \" +\n            peerId\n          );\n          this.connection.emit(\n            ConnectionEventType.Error,\n            new Error(\"Negotiation of connection to \" + peerId + \" failed.\")\n          );\n          this.connection.close();\n          break;\n        case \"closed\":\n          logger.log(\n            \"iceConnectionState is closed, closing connections to \" +\n            peerId\n          );\n          this.connection.emit(\n            ConnectionEventType.Error,\n            new Error(\"Negotiation of connection to \" + peerId + \" failed.\")\n          );\n          this.connection.close();\n          break;\n        case \"disconnected\":\n          logger.log(\n            \"iceConnectionState is disconnected, closing connections to \" +\n            peerId\n          );\n          break;\n        case \"completed\":\n          peerConnection.onicecandidate = util.noop;\n          break;\n      }\n\n      this.connection.emit(ConnectionEventType.IceStateChanged, peerConnection.iceConnectionState);\n    };\n\n    // DATACONNECTION.\n    logger.log(\"Listening for data channel\");\n    // Fired between offer and answer, so options should already be saved\n    // in the options hash.\n    peerConnection.ondatachannel = (evt) => {\n      logger.log(\"Received data channel\");\n\n      const dataChannel = evt.channel;\n      const connection = <DataConnection>(\n        provider.getConnection(peerId, connectionId)\n      );\n\n      connection.initialize(dataChannel);\n    };\n\n    // MEDIACONNECTION.\n    logger.log(\"Listening for remote stream\");\n\n    peerConnection.ontrack = (evt) => {\n      logger.log(\"Received remote stream\");\n\n      const stream = evt.streams[0];\n      const connection = provider.getConnection(peerId, connectionId);\n\n      if (connection.type === ConnectionType.Media) {\n        const mediaConnection = <MediaConnection>connection;\n\n        this._addStreamToMediaConnection(stream, mediaConnection);\n      }\n    };\n  }\n\n  cleanup(): void {\n    logger.log(\"Cleaning up PeerConnection to \" + this.connection.peer);\n\n    const peerConnection = this.connection.peerConnection;\n\n    if (!peerConnection) {\n      return;\n    }\n\n    this.connection.peerConnection = null;\n\n    //unsubscribe from all PeerConnection's events\n    peerConnection.onicecandidate = peerConnection.oniceconnectionstatechange = peerConnection.ondatachannel = peerConnection.ontrack = () => { };\n\n    const peerConnectionNotClosed = peerConnection.signalingState !== \"closed\";\n    let dataChannelNotClosed = false;\n\n    if (this.connection.type === ConnectionType.Data) {\n      const dataConnection = <DataConnection>this.connection;\n      const dataChannel = dataConnection.dataChannel;\n\n      dataChannelNotClosed =\n        dataChannel.readyState && dataChannel.readyState !== \"closed\";\n    }\n\n    if (peerConnectionNotClosed || dataChannelNotClosed) {\n      peerConnection.close();\n    }\n  }\n\n  private async _makeOffer(): Promise<void> {\n    const peerConnection = this.connection.peerConnection;\n    const provider = this.connection.provider;\n\n    try {\n      const offer = await peerConnection.createOffer(\n        this.connection.options.constraints\n      );\n\n      logger.log(\"Created offer.\");\n\n      if (!util.supports.sctp && this.connection.type === ConnectionType.Data) {\n        const dataConnection = <DataConnection>this.connection;\n        if (dataConnection.reliable) {\n          offer.sdp = Reliable.higherBandwidthSDP(offer.sdp);\n        }\n      }\n\n      if (this.connection.options.sdpTransform && typeof this.connection.options.sdpTransform === 'function') {\n        offer.sdp = this.connection.options.sdpTransform(offer.sdp) || offer.sdp;\n      }\n\n      try {\n        await peerConnection.setLocalDescription(offer);\n\n        logger.log(\"Set localDescription:\", offer, `for:${this.connection.peer}`);\n\n        let payload: any = {\n          sdp: offer,\n          type: this.connection.type,\n          connectionId: this.connection.connectionId,\n          metadata: this.connection.metadata,\n          browser: util.browser\n        };\n\n        if (this.connection.type === ConnectionType.Data) {\n          const dataConnection = <DataConnection>this.connection;\n\n          payload = {\n            ...payload,\n            label: dataConnection.label,\n            reliable: dataConnection.reliable,\n            serialization: dataConnection.serialization\n          };\n        }\n\n        provider.socket.send({\n          type: ServerMessageType.Offer,\n          payload,\n          dst: this.connection.peer\n        });\n      } catch (err) {\n        // TODO: investigate why _makeOffer is being called from the answer\n        if (\n          err !=\n          \"OperationError: Failed to set local offer sdp: Called in wrong state: kHaveRemoteOffer\"\n        ) {\n          provider.emitError(PeerErrorType.WebRTC, err);\n          logger.log(\"Failed to setLocalDescription, \", err);\n        }\n      }\n    } catch (err_1) {\n      provider.emitError(PeerErrorType.WebRTC, err_1);\n      logger.log(\"Failed to createOffer, \", err_1);\n    }\n  }\n\n  private async _makeAnswer(): Promise<void> {\n    const peerConnection = this.connection.peerConnection;\n    const provider = this.connection.provider;\n\n    try {\n      const answer = await peerConnection.createAnswer();\n      logger.log(\"Created answer.\");\n\n      if (!util.supports.sctp && this.connection.type === ConnectionType.Data) {\n        const dataConnection = <DataConnection>this.connection;\n        if (dataConnection.reliable) {\n          answer.sdp = Reliable.higherBandwidthSDP(answer.sdp);\n        }\n      }\n\n      try {\n        await peerConnection.setLocalDescription(answer);\n\n        logger.log(`Set localDescription:`, answer, `for:${this.connection.peer}`);\n\n        provider.socket.send({\n          type: ServerMessageType.Answer,\n          payload: {\n            sdp: answer,\n            type: this.connection.type,\n            connectionId: this.connection.connectionId,\n            browser: util.browser\n          },\n          dst: this.connection.peer\n        });\n      } catch (err) {\n        provider.emitError(PeerErrorType.WebRTC, err);\n        logger.log(\"Failed to setLocalDescription, \", err);\n      }\n    } catch (err_1) {\n      provider.emitError(PeerErrorType.WebRTC, err_1);\n      logger.log(\"Failed to create answer, \", err_1);\n    }\n  }\n\n  /** Handle an SDP. */\n  async handleSDP(\n    type: string,\n    sdp: any\n  ): Promise<void> {\n    sdp = new RTCSessionDescription(sdp);\n    const peerConnection = this.connection.peerConnection;\n    const provider = this.connection.provider;\n\n    logger.log(\"Setting remote description\", sdp);\n\n    const self = this;\n\n    try {\n      await peerConnection.setRemoteDescription(sdp);\n      logger.log(`Set remoteDescription:${type} for:${this.connection.peer}`);\n      if (type === \"OFFER\") {\n        await self._makeAnswer();\n      }\n    } catch (err) {\n      provider.emitError(PeerErrorType.WebRTC, err);\n      logger.log(\"Failed to setRemoteDescription, \", err);\n    }\n  }\n\n  /** Handle a candidate. */\n  async handleCandidate(ice: any): Promise<void> {\n    const candidate = ice.candidate;\n    const sdpMLineIndex = ice.sdpMLineIndex;\n    const peerConnection = this.connection.peerConnection;\n    const provider = this.connection.provider;\n\n    try {\n      await peerConnection.addIceCandidate(\n        new RTCIceCandidate({\n          sdpMLineIndex: sdpMLineIndex,\n          candidate: candidate\n        })\n      );\n      logger.log(`Added ICE candidate for:${this.connection.peer}`);\n    } catch (err) {\n      provider.emitError(PeerErrorType.WebRTC, err);\n      logger.log(\"Failed to handleCandidate, \", err);\n    }\n  }\n\n  private _addTracksToConnection(\n    stream: MediaStream,\n    peerConnection: RTCPeerConnection\n  ): void {\n    logger.log(`add tracks from stream ${stream.id} to peer connection`);\n\n    if (!peerConnection.addTrack) {\n      return logger.error(\n        `Your browser does't support RTCPeerConnection#addTrack. Ignored.`\n      );\n    }\n\n    stream.getTracks().forEach(track => {\n      peerConnection.addTrack(track, stream);\n    });\n  }\n\n  private _addStreamToMediaConnection(\n    stream: MediaStream,\n    mediaConnection: MediaConnection\n  ): void {\n    logger.log(\n      `add stream ${stream.id} to media connection ${\n      mediaConnection.connectionId\n      }`\n    );\n\n    mediaConnection.addStream(stream);\n  }\n}\n","import { EventEmitter } from \"eventemitter3\";\nimport { Peer } from \"./peer\";\nimport { ServerMessage } from \"./servermessage\";\nimport { ConnectionType } from \"./enums\";\n\nexport abstract class BaseConnection extends EventEmitter {\n  protected _open = false;\n\n  readonly metadata: any;\n  connectionId: string;\n\n  peerConnection: RTCPeerConnection;\n\n  abstract get type(): ConnectionType;\n\n  get open() {\n    return this._open;\n  }\n\n  constructor(\n    readonly peer: string,\n    public provider: Peer,\n    readonly options: any\n  ) {\n    super();\n\n    this.metadata = options.metadata;\n  }\n\n  abstract close(): void;\n\n  abstract handleMessage(message: ServerMessage): void;\n}\n","import { util } from \"./util\";\nimport logger from \"./logger\";\nimport { Negotiator } from \"./negotiator\";\nimport { ConnectionType, ConnectionEventType, ServerMessageType } from \"./enums\";\nimport { Peer } from \"./peer\";\nimport { BaseConnection } from \"./baseconnection\";\nimport { ServerMessage } from \"./servermessage\";\n\n/**\n * Wraps the streaming interface between two Peers.\n */\nexport class MediaConnection extends BaseConnection {\n  private static readonly ID_PREFIX = \"mc_\";\n\n  private _negotiator: Negotiator;\n  private _localStream: MediaStream;\n  private _remoteStream: MediaStream;\n\n  get type() {\n    return ConnectionType.Media;\n  }\n\n  get localStream(): MediaStream { return this._localStream; }\n  get remoteStream(): MediaStream { return this._remoteStream; }\n\n  constructor(peerId: string, provider: Peer, options: any) {\n    super(peerId, provider, options);\n\n    this._localStream = this.options._stream;\n    this.connectionId =\n      this.options.connectionId ||\n      MediaConnection.ID_PREFIX + util.randomToken();\n\n    this._negotiator = new Negotiator(this);\n\n    if (this._localStream) {\n      this._negotiator.startConnection({\n        _stream: this._localStream,\n        originator: true\n      });\n    }\n  }\n\n  addStream(remoteStream) {\n    logger.log(\"Receiving stream\", remoteStream);\n\n    this._remoteStream = remoteStream;\n    super.emit(ConnectionEventType.Stream, remoteStream); // Should we call this `open`?\n  }\n\n  handleMessage(message: ServerMessage): void {\n    const type = message.type;\n    const payload = message.payload;\n\n    switch (message.type) {\n      case ServerMessageType.Answer:\n        // Forward to negotiator\n        this._negotiator.handleSDP(type, payload.sdp);\n        this._open = true;\n        break;\n      case ServerMessageType.Candidate:\n        this._negotiator.handleCandidate(payload.candidate);\n        break;\n      default:\n        logger.warn(`Unrecognized message type:${type} from peer:${this.peer}`);\n        break;\n    }\n  }\n\n  answer(stream: MediaStream): void {\n    if (this._localStream) {\n      logger.warn(\n        \"Local stream already exists on this MediaConnection. Are you answering a call twice?\"\n      );\n      return;\n    }\n\n    this._localStream = stream;\n    this._negotiator.startConnection({ ...this.options._payload, _stream: stream });\n    // Retrieve lost messages stored because PeerConnection not set up.\n    const messages = this.provider._getMessages(this.connectionId);\n\n    for (let message of messages) {\n      this.handleMessage(message);\n    }\n\n    this._open = true;\n  }\n\n  /**\n   * Exposed functionality for users.\n   */\n\n  /** Allows user to close connection. */\n  close(): void {\n    if (this._negotiator) {\n      this._negotiator.cleanup();\n      this._negotiator = null;\n    }\n\n    this._localStream = null;\n    this._remoteStream = null;\n\n    if (this.provider) {\n      const connections = this.provider.connections[this.peer];\n\n      if (connections) {\n        const index = connections.indexOf(this);\n\n        if (index !== -1) {\n          connections.splice(index, 1);\n        }\n      }\n\n      this.provider = null;\n    }\n\n    if (this.options && this.options._stream) {\n      this.options._stream = null;\n    }\n\n    if (!this.open) {\n      return;\n    }\n\n    this._open = false;\n\n    super.emit(ConnectionEventType.Close);\n  }\n}\n","import { Reliable } from \"reliable\";\nimport { util } from \"./util\";\nimport logger, { LogLevel } from \"./logger\";\nimport { Negotiator } from \"./negotiator\";\nimport {\n  ConnectionType,\n  ConnectionEventType,\n  SerializationType,\n  ServerMessageType\n} from \"./enums\";\nimport { Peer } from \"./peer\";\nimport { BaseConnection } from \"./baseconnection\";\nimport { ServerMessage } from \"./servermessage\";\n\n/**\n * Wraps a DataChannel between two Peers.\n */\nexport class DataConnection extends BaseConnection {\n  private static readonly ID_PREFIX = \"dc_\";\n\n  private _negotiator: Negotiator;\n  readonly label: string;\n  readonly serialization: SerializationType;\n  readonly reliable: boolean;\n\n  get type() {\n    return ConnectionType.Data;\n  }\n\n  private _buffer: any[] = [];\n  private _bufferSize = 0;\n  private _buffering = false;\n  private _chunkedData = {};\n\n  private _peerBrowser: any;\n  private _dc: RTCDataChannel;\n  private _reliable: Reliable;\n\n  get dataChannel(): RTCDataChannel {\n    return this._dc;\n  }\n\n  get bufferSize(): number { return this._bufferSize; }\n\n  constructor(peerId: string, provider: Peer, options: any) {\n    super(peerId, provider, options);\n\n    this.connectionId =\n      this.options.connectionId || DataConnection.ID_PREFIX + util.randomToken();\n\n    this.label = this.options.label || this.connectionId;\n    this.serialization = this.options.serialization || SerializationType.Binary;\n    this.reliable = this.options.reliable;\n\n    if (this.options._payload) {\n      this._peerBrowser = this.options._payload.browser;\n    }\n\n    this._negotiator = new Negotiator(this);\n\n    this._negotiator.startConnection(\n      this.options._payload || {\n        originator: true\n      }\n    );\n  }\n\n  /** Called by the Negotiator when the DataChannel is ready. */\n  initialize(dc: RTCDataChannel): void {\n    this._dc = dc;\n    this._configureDataChannel();\n  }\n\n  private _configureDataChannel(): void {\n    if (util.supports.sctp) {\n      this.dataChannel.binaryType = \"arraybuffer\";\n    }\n\n    this.dataChannel.onopen = () => {\n      logger.log(\"Data channel connection success\");\n      this._open = true;\n      this.emit(ConnectionEventType.Open);\n    };\n\n    // Use the Reliable shim for non Firefox browsers\n    if (!util.supports.sctp && this.reliable) {\n      const isLoggingEnable = logger.logLevel > LogLevel.Disabled;\n      this._reliable = new Reliable(this.dataChannel, isLoggingEnable);\n    }\n\n    if (this._reliable) {\n      this._reliable.onmessage = (msg) => {\n        this.emit(ConnectionEventType.Data, msg);\n      };\n    } else {\n      this.dataChannel.onmessage = (e) => {\n        this._handleDataMessage(e);\n      };\n    }\n    this.dataChannel.onclose = () => {\n      logger.log(\"DataChannel closed for:\", this.peer);\n      this.close();\n    };\n  }\n\n  // Handles a DataChannel message.\n  private _handleDataMessage(e): void {\n    let data = e.data;\n    const datatype = data.constructor;\n\n    const isBinarySerialization = this.serialization === SerializationType.Binary ||\n      this.serialization === SerializationType.BinaryUTF8;\n\n    if (isBinarySerialization) {\n      if (datatype === Blob) {\n        // Datatype should never be blob\n        util.blobToArrayBuffer(data, (ab) => {\n          data = util.unpack(ab);\n          this.emit(ConnectionEventType.Data, data);\n        });\n        return;\n      } else if (datatype === ArrayBuffer) {\n        data = util.unpack(data);\n      } else if (datatype === String) {\n        // String fallback for binary data for browsers that don't support binary yet\n        const ab = util.binaryStringToArrayBuffer(data);\n        data = util.unpack(ab);\n      }\n    } else if (this.serialization === SerializationType.JSON) {\n      data = JSON.parse(data);\n    }\n\n    // Check if we've chunked--if so, piece things back together.\n    // We're guaranteed that this isn't 0.\n    if (data.__peerData) {\n      const id = data.__peerData;\n      const chunkInfo = this._chunkedData[id] || {\n        data: [],\n        count: 0,\n        total: data.total\n      };\n\n      chunkInfo.data[data.n] = data.data;\n      chunkInfo.count++;\n\n      if (chunkInfo.total === chunkInfo.count) {\n        // Clean up before making the recursive call to `_handleDataMessage`.\n        delete this._chunkedData[id];\n\n        // We've received all the chunks--time to construct the complete data.\n        data = new Blob(chunkInfo.data);\n        this._handleDataMessage({ data: data });\n      }\n\n      this._chunkedData[id] = chunkInfo;\n      return;\n    }\n\n    super.emit(ConnectionEventType.Data, data);\n  }\n\n  /**\n   * Exposed functionality for users.\n   */\n\n  /** Allows user to close connection. */\n  close(): void {\n    this._buffer = [];\n    this._bufferSize = 0;\n\n    if (this._negotiator) {\n      this._negotiator.cleanup();\n      this._negotiator = null;\n    }\n\n    if (this.provider) {\n      const connections = this.provider.connections[this.peer];\n\n      if (connections) {\n        const index = connections.indexOf(this);\n\n        if (index !== -1) {\n          connections.splice(index, 1);\n        }\n      }\n\n      this.provider = null;\n    }\n\n    if (!this.open) {\n      return;\n    }\n\n    this._open = false;\n\n    super.emit(ConnectionEventType.Close);\n  }\n\n  /** Allows user to send data. */\n  send(data: any, chunked: boolean): void {\n    if (!this.open) {\n      super.emit(\n        ConnectionEventType.Error,\n        new Error(\n          \"Connection is not open. You should listen for the `open` event before sending messages.\"\n        )\n      );\n      return;\n    }\n\n    if (this._reliable) {\n      // Note: reliable shim sending will make it so that you cannot customize\n      // serialization.\n      this._reliable.send(data);\n      return;\n    }\n\n    if (this.serialization === SerializationType.JSON) {\n      this._bufferedSend(JSON.stringify(data));\n    } else if (\n      this.serialization === SerializationType.Binary ||\n      this.serialization === SerializationType.BinaryUTF8\n    ) {\n      const blob = util.pack(data);\n\n      // For Chrome-Firefox interoperability, we need to make Firefox \"chunk\"\n      // the data it sends out.\n      const needsChunking =\n        util.chunkedBrowsers[this._peerBrowser] ||\n        util.chunkedBrowsers[util.browser];\n\n      if (needsChunking && !chunked && blob.size > util.chunkedMTU) {\n        this._sendChunks(blob);\n        return;\n      }\n\n      // DataChannel currently only supports strings.\n      if (!util.supports.sctp) {\n        util.blobToBinaryString(blob, (str) => {\n          this._bufferedSend(str);\n        });\n      } else if (!util.supports.binaryBlob) {\n        // We only do this if we really need to (e.g. blobs are not supported),\n        // because this conversion is costly.\n        util.blobToArrayBuffer(blob, (ab) => {\n          this._bufferedSend(ab);\n        });\n      } else {\n        this._bufferedSend(blob);\n      }\n    } else {\n      this._bufferedSend(data);\n    }\n  }\n\n  private _bufferedSend(msg: any): void {\n    if (this._buffering || !this._trySend(msg)) {\n      this._buffer.push(msg);\n      this._bufferSize = this._buffer.length;\n    }\n  }\n\n  // Returns true if the send succeeds.\n  private _trySend(msg: any): boolean {\n    if (!this.open) {\n      return false;\n    }\n\n    try {\n      this.dataChannel.send(msg);\n    } catch (e) {\n      this._buffering = true;\n\n      setTimeout(() => {\n        // Try again.\n        this._buffering = false;\n        this._tryBuffer();\n      }, 100);\n\n      return false;\n    }\n\n    return true;\n  }\n\n  // Try to send the first message in the buffer.\n  private _tryBuffer(): void {\n    if (!this.open) {\n      return;\n    }\n\n    if (this._buffer.length === 0) {\n      return;\n    }\n\n    const msg = this._buffer[0];\n\n    if (this._trySend(msg)) {\n      this._buffer.shift();\n      this._bufferSize = this._buffer.length;\n      this._tryBuffer();\n    }\n  }\n\n  private _sendChunks(blob): void {\n    const blobs = util.chunk(blob);\n\n    for (let blob of blobs) {\n      this.send(blob, true);\n    }\n  }\n\n  handleMessage(message: ServerMessage): void {\n    const payload = message.payload;\n\n    switch (message.type) {\n      case ServerMessageType.Answer:\n        this._peerBrowser = payload.browser;\n\n        // Forward to negotiator\n        this._negotiator.handleSDP(message.type, payload.sdp);\n        break;\n      case ServerMessageType.Candidate:\n        this._negotiator.handleCandidate(payload.candidate);\n        break;\n      default:\n        logger.warn(\n          \"Unrecognized message type:\",\n          message.type,\n          \"from peer:\",\n          this.peer\n        );\n        break;\n    }\n  }\n}\n","import { util } from \"./util\";\nimport logger from \"./logger\";\n\nexport class API {\n  constructor(private readonly _options: any) { }\n\n  private _buildUrl(method: string): string {\n    const protocol = this._options.secure ? \"https://\" : \"http://\";\n    let url =\n      protocol +\n      this._options.host +\n      \":\" +\n      this._options.port +\n      this._options.path +\n      this._options.key +\n      \"/\" +\n      method;\n    const queryString = \"?ts=\" + new Date().getTime() + \"\" + Math.random();\n    url += queryString;\n\n    return url;\n  }\n\n  /** Get a unique ID from the server via XHR and initialize with it. */\n  async retrieveId(): Promise<string> {\n    const url = this._buildUrl(\"id\");\n\n    try {\n      const response = await fetch(url);\n\n      if (response.status !== 200) {\n        throw new Error(`Error. Status:${response.status}`)\n      }\n\n      return response.text();\n    } catch (error) {\n      logger.error(\"Error retrieving ID\", error);\n\n      let pathError = \"\";\n\n      if (\n        this._options.path === \"/\" &&\n        this._options.host !== util.CLOUD_HOST\n      ) {\n        pathError =\n          \" If you passed in a `path` to your self-hosted PeerServer, \" +\n          \"you'll also need to pass in that same path when creating a new \" +\n          \"Peer.\";\n      }\n\n      throw new Error(\"Could not get an ID from the server.\" + pathError);\n    }\n  }\n\n  /** @deprecated */\n  async listAllPeers(): Promise<any[]> {\n    const url = this._buildUrl(\"peers\");\n\n    try {\n      const response = await fetch(url);\n\n      if (response.status !== 200) {\n        if (response.status === 401) {\n          let helpfulError = \"\";\n\n          if (this._options.host === util.CLOUD_HOST) {\n            helpfulError =\n              \"It looks like you're using the cloud server. You can email \" +\n              \"team@peerjs.com to enable peer listing for your API key.\";\n          } else {\n            helpfulError =\n              \"You need to enable `allow_discovery` on your self-hosted \" +\n              \"PeerServer to use this feature.\";\n          }\n\n          throw new Error(\"It doesn't look like you have permission to list peers IDs. \" +\n            helpfulError);\n        }\n\n        throw new Error(`Error. Status:${response.status}`)\n      }\n\n      return response.json();\n    } catch (error) {\n      logger.error(\"Error retrieving list peers\", error);\n\n      throw new Error(\"Could not get list peers from the server.\" + error);\n    }\n  }\n}\n","import { EventEmitter } from \"eventemitter3\";\nimport { util } from \"./util\";\nimport logger, { LogLevel } from \"./logger\";\nimport { Socket } from \"./socket\";\nimport { MediaConnection } from \"./mediaconnection\";\nimport { DataConnection } from \"./dataconnection\";\nimport {\n  ConnectionType,\n  PeerErrorType,\n  PeerEventType,\n  SocketEventType,\n  ServerMessageType\n} from \"./enums\";\nimport { BaseConnection } from \"./baseconnection\";\nimport { ServerMessage } from \"./servermessage\";\nimport { API } from \"./api\";\nimport { PeerConnectOption, PeerJSOption } from \"..\";\n\nclass PeerOptions implements PeerJSOption {\n  debug?: LogLevel; // 1: Errors, 2: Warnings, 3: All logs\n  host?: string;\n  port?: number;\n  path?: string;\n  key?: string;\n  token?: string;\n  config?: any;\n  secure?: boolean;\n  logFunction?: (logLevel: LogLevel, ...rest) => void;\n}\n\n/**\n * A peer who can initiate connections with other peers.\n */\nexport class Peer extends EventEmitter {\n  private static readonly DEFAULT_KEY = \"peerjs\";\n\n  private readonly _options: PeerOptions;\n  private _id: string;\n  private _lastServerId: string;\n  private _api: API;\n\n  // States.\n  private _destroyed = false; // Connections have been killed\n  private _disconnected = false; // Connection to PeerServer killed but P2P connections still active\n  private _open = false; // Sockets and such are not yet open.\n  private readonly _connections: Map<string, BaseConnection[]> = new Map(); // All connections for this peer.\n  private readonly _lostMessages: Map<string, ServerMessage[]> = new Map(); // src => [list of messages]\n\n  private _socket: Socket;\n\n  get id() {\n    return this._id;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  get open() {\n    return this._open;\n  }\n\n  get socket() {\n    return this._socket;\n  }\n\n  /**\n   * @deprecated \n   * Return type will change from Object to Map<string,[]> \n   */\n  get connections(): Object {\n    const plainConnections = Object.create(null);\n\n    for (let [k, v] of this._connections) {\n      plainConnections[k] = v;\n    }\n\n    return plainConnections;\n  }\n\n  get destroyed() {\n    return this._destroyed;\n  }\n  get disconnected() {\n    return this._disconnected;\n  }\n\n  constructor(id?: any, options?: PeerOptions) {\n    super();\n\n    // Deal with overloading\n    if (id && id.constructor == Object) {\n      options = id;\n      id = undefined;\n    } else if (id) {\n      id = id.toString();\n    }\n\n    // Configurize options\n    options = {\n      debug: 0, // 1: Errors, 2: Warnings, 3: All logs\n      host: util.CLOUD_HOST,\n      port: util.CLOUD_PORT,\n      path: \"/\",\n      key: Peer.DEFAULT_KEY,\n      token: util.randomToken(),\n      config: util.defaultConfig,\n      ...options\n    };\n    this._options = options;\n\n    // Detect relative URL host.\n    if (options.host === \"/\") {\n      options.host = window.location.hostname;\n    }\n    // Set path correctly.\n    if (options.path[0] !== \"/\") {\n      options.path = \"/\" + options.path;\n    }\n    if (options.path[options.path.length - 1] !== \"/\") {\n      options.path += \"/\";\n    }\n\n    // Set whether we use SSL to same as current host\n    if (options.secure === undefined && options.host !== util.CLOUD_HOST) {\n      options.secure = util.isSecure();\n    } else if (options.host == util.CLOUD_HOST) {\n      options.secure = true;\n    }\n    // Set a custom log function if present\n    if (options.logFunction) {\n      logger.setLogFunction(options.logFunction);\n    }\n\n    logger.logLevel = options.debug;\n\n    // Sanity checks\n    // Ensure WebRTC supported\n    if (!util.supports.audioVideo && !util.supports.data) {\n      this._delayedAbort(\n        PeerErrorType.BrowserIncompatible,\n        \"The current browser does not support WebRTC\"\n      );\n      return;\n    }\n    // Ensure alphanumeric id\n    if (!util.validateId(id)) {\n      this._delayedAbort(PeerErrorType.InvalidID, `ID \"${id}\" is invalid`);\n      return;\n    }\n\n    this._api = new API(options);\n\n    // Start the server connection\n    this._initializeServerConnection();\n\n    if (id) {\n      this._initialize(id);\n    } else {\n      this._api.retrieveId()\n        .then(id => this._initialize(id))\n        .catch(error => this._abort(PeerErrorType.ServerError, error));\n    }\n  }\n\n  // Initialize the 'socket' (which is actually a mix of XHR streaming and\n  // websockets.)\n  private _initializeServerConnection(): void {\n    this._socket = new Socket(\n      this._options.secure,\n      this._options.host,\n      this._options.port,\n      this._options.path,\n      this._options.key,\n    );\n\n    this.socket.on(SocketEventType.Message, data => {\n      this._handleMessage(data);\n    });\n\n    this.socket.on(SocketEventType.Error, error => {\n      this._abort(PeerErrorType.SocketError, error);\n    });\n\n    this.socket.on(SocketEventType.Disconnected, () => {\n      // If we haven't explicitly disconnected, emit error and disconnect.\n      if (!this.disconnected) {\n        this.emitError(PeerErrorType.Network, \"Lost connection to server.\");\n        this.disconnect();\n      }\n    });\n\n    this.socket.on(SocketEventType.Close, () => {\n      // If we haven't explicitly disconnected, emit error.\n      if (!this.disconnected) {\n        this._abort(\n          PeerErrorType.SocketClosed,\n          \"Underlying socket is already closed.\"\n        );\n      }\n    });\n  }\n\n  /** Initialize a connection with the server. */\n  private _initialize(id: string): void {\n    this._id = id;\n    this.socket.start(this.id, this._options.token);\n  }\n\n  /** Handles messages from the server. */\n  private _handleMessage(message: ServerMessage): void {\n    const type = message.type;\n    const payload = message.payload;\n    const peerId = message.src;\n\n    switch (type) {\n      case ServerMessageType.Open: // The connection to the server is open.\n        this.emit(PeerEventType.Open, this.id);\n        this._open = true;\n        break;\n      case ServerMessageType.Error: // Server error.\n        this._abort(PeerErrorType.ServerError, payload.msg);\n        break;\n      case ServerMessageType.IdTaken: // The selected ID is taken.\n        this._abort(PeerErrorType.UnavailableID, `ID \"${this.id}\" is taken`);\n        break;\n      case ServerMessageType.InvalidKey: // The given API key cannot be found.\n        this._abort(\n          PeerErrorType.InvalidKey,\n          `API KEY \"${this._options.key}\" is invalid`\n        );\n        break;\n      case ServerMessageType.Leave: // Another peer has closed its connection to this peer.\n        logger.log(\"Received leave message from\", peerId);\n        this._cleanupPeer(peerId);\n        this._connections.delete(peerId);\n        break;\n      case ServerMessageType.Expire: // The offer sent to a peer has expired without response.\n        this.emitError(\n          PeerErrorType.PeerUnavailable,\n          \"Could not connect to peer \" + peerId\n        );\n        break;\n      case ServerMessageType.Offer: {\n        // we should consider switching this to CALL/CONNECT, but this is the least breaking option.\n        const connectionId = payload.connectionId;\n        let connection = this.getConnection(peerId, connectionId);\n\n        if (connection) {\n          connection.close();\n          logger.warn(\"Offer received for existing Connection ID:\", connectionId);\n        }\n\n        // Create a new connection.\n        if (payload.type === ConnectionType.Media) {\n          connection = new MediaConnection(peerId, this, {\n            connectionId: connectionId,\n            _payload: payload,\n            metadata: payload.metadata\n          });\n          this._addConnection(peerId, connection);\n          this.emit(PeerEventType.Call, connection);\n        } else if (payload.type === ConnectionType.Data) {\n          connection = new DataConnection(peerId, this, {\n            connectionId: connectionId,\n            _payload: payload,\n            metadata: payload.metadata,\n            label: payload.label,\n            serialization: payload.serialization,\n            reliable: payload.reliable\n          });\n          this._addConnection(peerId, connection);\n          this.emit(PeerEventType.Connection, connection);\n        } else {\n          logger.warn(\"Received malformed connection type:\", payload.type);\n          return;\n        }\n\n        // Find messages.\n        const messages = this._getMessages(connectionId);\n        for (let message of messages) {\n          connection.handleMessage(message);\n        }\n\n        break;\n      }\n      default: {\n        if (!payload) {\n          logger.warn(\n            `You received a malformed message from ${peerId} of type ${type}`\n          );\n          return;\n        }\n\n        const connectionId = payload.connectionId;\n        const connection = this.getConnection(peerId, connectionId);\n\n        if (connection && connection.peerConnection) {\n          // Pass it on.\n          connection.handleMessage(message);\n        } else if (connectionId) {\n          // Store for possible later use\n          this._storeMessage(connectionId, message);\n        } else {\n          logger.warn(\"You received an unrecognized message:\", message);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Stores messages without a set up connection, to be claimed later. */\n  private _storeMessage(connectionId: string, message: ServerMessage): void {\n    if (!this._lostMessages.has(connectionId)) {\n      this._lostMessages.set(connectionId, []);\n    }\n\n    this._lostMessages.get(connectionId).push(message);\n  }\n\n  /** Retrieve messages from lost message store */\n  //TODO Change it to private\n  public _getMessages(connectionId: string): ServerMessage[] {\n    const messages = this._lostMessages.get(connectionId);\n\n    if (messages) {\n      this._lostMessages.delete(connectionId);\n      return messages;\n    }\n\n    return [];\n  }\n\n  /**\n   * Returns a DataConnection to the specified peer. See documentation for a\n   * complete list of options.\n   */\n  connect(peer: string, options: PeerConnectOption = {}): DataConnection {\n    if (this.disconnected) {\n      logger.warn(\n        \"You cannot connect to a new Peer because you called \" +\n        \".disconnect() on this Peer and ended your connection with the \" +\n        \"server. You can create a new Peer to reconnect, or call reconnect \" +\n        \"on this peer if you believe its ID to still be available.\"\n      );\n      this.emitError(\n        PeerErrorType.Disconnected,\n        \"Cannot connect to new Peer after disconnecting from server.\"\n      );\n      return;\n    }\n\n    const dataConnection = new DataConnection(peer, this, options);\n    this._addConnection(peer, dataConnection);\n    return dataConnection;\n  }\n\n  /**\n   * Returns a MediaConnection to the specified peer. See documentation for a\n   * complete list of options.\n   */\n  call(peer: string, stream: MediaStream, options: any = {}): MediaConnection {\n    if (this.disconnected) {\n      logger.warn(\n        \"You cannot connect to a new Peer because you called \" +\n        \".disconnect() on this Peer and ended your connection with the \" +\n        \"server. You can create a new Peer to reconnect.\"\n      );\n      this.emitError(\n        PeerErrorType.Disconnected,\n        \"Cannot connect to new Peer after disconnecting from server.\"\n      );\n      return;\n    }\n\n    if (!stream) {\n      logger.error(\n        \"To call a peer, you must provide a stream from your browser's `getUserMedia`.\"\n      );\n      return;\n    }\n\n    options._stream = stream;\n\n    const mediaConnection = new MediaConnection(peer, this, options);\n    this._addConnection(peer, mediaConnection);\n    return mediaConnection;\n  }\n\n  /** Add a data/media connection to this peer. */\n  private _addConnection(peerId: string, connection: BaseConnection): void {\n    logger.log(\n      `add connection ${connection.type}:${connection.connectionId}\n       to peerId:${peerId}`\n    );\n\n    if (!this._connections.has(peerId)) {\n      this._connections.set(peerId, []);\n    }\n    this._connections.get(peerId).push(connection);\n  }\n\n  /** Retrieve a data/media connection for this peer. */\n  getConnection(peerId: string, connectionId: string): null | BaseConnection {\n    const connections = this._connections.get(peerId);\n    if (!connections) {\n      return null;\n    }\n\n    for (let connection of connections) {\n      if (connection.connectionId === connectionId) {\n        return connection;\n      }\n    }\n\n    return null;\n  }\n\n  private _delayedAbort(type: PeerErrorType, message): void {\n    setTimeout(() => {\n      this._abort(type, message);\n    }, 0);\n  }\n\n  /**\n   * Destroys the Peer and emits an error message.\n   * The Peer is not destroyed if it's in a disconnected state, in which case\n   * it retains its disconnected state and its existing connections.\n   */\n  private _abort(type: PeerErrorType, message): void {\n    logger.error(\"Aborting!\");\n\n    if (!this._lastServerId) {\n      this.destroy();\n    } else {\n      this.disconnect();\n    }\n\n    this.emitError(type, message);\n  }\n\n  /** Emits a typed error message. */\n  emitError(type: PeerErrorType, err): void {\n    logger.error(\"Error:\", err);\n\n    if (typeof err === \"string\") {\n      err = new Error(err);\n    }\n\n    err.type = type;\n\n    this.emit(PeerEventType.Error, err);\n  }\n\n  /**\n   * Destroys the Peer: closes all active connections as well as the connection\n   *  to the server.\n   * Warning: The peer can no longer create or accept connections after being\n   *  destroyed.\n   */\n  destroy(): void {\n    if (!this.destroyed) {\n      this._cleanup();\n      this.disconnect();\n      this._destroyed = true;\n    }\n  }\n\n  /** Disconnects every connection on this peer. */\n  private _cleanup(): void {\n    for (let peerId of this._connections.keys()) {\n      this._cleanupPeer(peerId);\n      this._connections.delete(peerId);\n    }\n\n    this.emit(PeerEventType.Close);\n  }\n\n  /** Closes all connections to this peer. */\n  private _cleanupPeer(peerId: string): void {\n    const connections = this._connections.get(peerId);\n\n    if (!connections) return;\n\n    for (let connection of connections) {\n      connection.close();\n    }\n  }\n\n  /**\n   * Disconnects the Peer's connection to the PeerServer. Does not close any\n   *  active connections.\n   * Warning: The peer can no longer create or accept connections after being\n   *  disconnected. It also cannot reconnect to the server.\n   */\n  disconnect(): void {\n    setTimeout(() => {\n      if (!this.disconnected) {\n        this._disconnected = true;\n        this._open = false;\n        if (this.socket) {\n          this.socket.close();\n        }\n\n        this.emit(PeerEventType.Disconnected, this.id);\n        this._lastServerId = this.id;\n        this._id = null;\n      }\n    }, 0);\n  }\n\n  /** Attempts to reconnect with the same ID. */\n  reconnect(): void {\n    if (this.disconnected && !this.destroyed) {\n      logger.log(\n        \"Attempting reconnection to server with ID \" + this._lastServerId\n      );\n      this._disconnected = false;\n      this._initializeServerConnection();\n      this._initialize(this._lastServerId);\n    } else if (this.destroyed) {\n      throw new Error(\n        \"This peer cannot reconnect to the server. It has already been destroyed.\"\n      );\n    } else if (!this.disconnected && !this.open) {\n      // Do nothing. We're still connecting the first time.\n      logger.error(\n        \"In a hurry? We're still trying to make the initial connection!\"\n      );\n    } else {\n      throw new Error(\n        \"Peer \" +\n        this.id +\n        \" cannot reconnect because it is not disconnected from the server!\"\n      );\n    }\n  }\n\n  /**\n   * Get a list of available peer IDs. If you're running your own server, you'll\n   * want to set allow_discovery: true in the PeerServer options. If you're using\n   * the cloud server, email team@peerjs.com to get the functionality enabled for\n   * your key.\n   */\n  listAllPeers(cb = (_: any[]) => { }): void {\n    this._api.listAllPeers()\n      .then(peers => cb(peers))\n      .catch(error => this._abort(PeerErrorType.ServerError, error));\n  }\n}\n","import { util } from \"./util\";\nimport { Peer } from \"./peer\";\n\nexport const peerjs = {\n  Peer,\n  util\n};\n\nexport default Peer;\n\n(<any>window).peerjs = peerjs;\n/** @deprecated Should use peerjs namespace */\n(<any>window).Peer = Peer;\n"]}