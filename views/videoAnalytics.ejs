<% include layout/navbar %>
<style>
    html,
    body {
        width: 100%;
        height: 100%;
    }

    /* meterial loader */
    .linear-activity {
        overflow: hidden;
        width: 50%;
        height: 4px;
        background-color: #B3E5FC;
        margin: 20px auto;
    }

    .determinate {
        position: relative;
        max-width: 100%;
        height: 100%;
        -webkit-transition: width 500ms ease-out 1s;
        -moz-transition: width 500ms ease-out 1s;
        -o-transition: width 500ms ease-out 1s;
        transition: width 500ms ease-out 1s;
        background-color: #03A9F4;
    }

    .indeterminate {
        position: relative;
        width: 100%;
        height: 100%;
    }

    .indeterminate:before {
        content: '';
        position: absolute;
        height: 100%;
        background-color: #03A9F4;
        animation: indeterminate_first 1.5s infinite ease-out;
    }

    .indeterminate:after {
        content: '';
        position: absolute;
        height: 100%;
        background-color: #4FC3F7;
        animation: indeterminate_second 1.5s infinite ease-in;
    }

    @keyframes indeterminate_first {
        0% {
            left: -100%;
            width: 100%;
        }

        100% {
            left: 100%;
            width: 10%;
        }
    }

    @keyframes indeterminate_second {
        0% {
            left: -150%;
            width: 100%;
        }

        100% {
            left: 100%;
            width: 10%;
        }
    }

    /* end of meterial loader */
    .back {
        font-size: 26px;
        color: rgb(109, 107, 107);
    }

    .back:hover {
        color: black;
    }

    .chapterList {
        list-style: none;
    }

    .chapter a {
        display: flex;
        justify-content: start;
        padding: 1rem;
        color: black;
        text-decoration: none
    }

    .chapter p {
        display: flex;
        justify-content: center;
        flex-direction: column;
        color: black;
        padding: 0;
        margin: 0;
    }

    .chapter i {
        display: flex;
        justify-content: center;
        flex-direction: column;
        margin-right: 1rem;
    }

    .chapter:hover {
        background: rgb(224, 224, 224)
    }

    .chapter a:focus {
        border-left: 4px solid rgb(199, 45, 39);
        outline: none
    }

    .chapter2 {
        width: 100%;
        height: 3rem;
        display: flex;
        flex-direction: column;
        justify-content: center
    }

    .chapter2 a {
        display: flex;
        flex-direction: column;
        justify-content: center;
        text-decoration: none;
        color: black;
        width: 100%;
        height: 100%;
        padding: 1rem
    } 
    .card{
        width: auto;
        flex: 1 auto;
    } 
    @media only screen and (max-width:400px){
        .topNavgation{
            display: none !important;
        }
        /* .chartjs-size-monitor{
            width: 100vw !important;
        } */
        #chartDiv{
            /* padding: 0.5rem !important; */
            margin: 0.5rem !important;
            width: 93vw !important;
        }
        #resentViewChartDiv{
            margin: 0.5rem !important;
            width: 93vw !important;
        }
        .notDisplayInSmallScreen{
            display: none;
        }
        #videDitalDiv{
            width: 97vw !important;
        }
        .detialcard{
            width: 100% !important;
        }
        #commentDiv{
            padding: 1rem !important;
        }
    }

</style>
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css"
    integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">
<div id="line-loader" class="linear-activity w-100 pt-0 pb-0 mb-0" style="display: none;margin-top: -0.7rem">
    <div class="indeterminate"></div>
</div>
<div class="row w-100">
    <div class="col-lg-2 col-sm-12 chapterDiv" style="border-right: 1px solid rgb(229, 229, 229);padding-right: 0">
        <img src="https://img.youtube.com/vi/<%=videoinfo.videoURL%>/0.jpg" style="width: 100%;">

        <ul class="chapterList m-0 p-0">
            <li class="chapter2">
                <a href="#" style="font-size: 14px;color: rgb(85, 85, 85)">影片</a>
            </li>
            <li class="chapter">
                <a href="#" onclick="showVideoDetial('<%=videoinfo._id%>')">
                    <i class="fas fa-pen"></i>
                    <p>詳細資料</p>
                </a>
            </li>
            <li class="chapter">
                <a href="#" onclick="analyseData('<%=videoinfo._id%>')">
                    <i class="fas fa-chart-bar"></i>
                    <p>數據分析</p>
                </a>
            </li>
            <li class="chapter">
                <a href="#" onclick="showComment('<%=videoinfo._id%>')">
                    <i class="far fa-comment-alt"></i>
                    <p>留言</p>
                </a>
            </li>
        </ul>
    </div>

    <div class="col-lg-10 col-sm-12 videos">
        <div class = "topNavgation mt-2" style="display: flex;justify-content: start">
            <i class="fas fa-arrow-left back mr-4" data-toggle="tooltip" title="返回影片清單"
                style="display:flex;justify-content:center;flex-direction: column;"
                onclick="window.location='/class/showVideoSituation/<%=unit.belongClass%>'"></i>
            <h3 style="display:flex;justify-content:center;flex-direction: column;padding: 0;margin: 0;">
                <%=videoinfo.videoName%></h3>
        </div>
        <div id = "videDitalDiv"style="display: none;overflow-x:scroll">
            <div class="card detialcard m-2">
                <h5 class="card-header">所屬課程</h5>
                <div class="card-body">
                    <p class="card-text" id = "DitalbelongClass"></p>
                </div>
            </div> 
            <div class="card detialcard m-2">
                <h5 class="card-header">所屬單元</h5>
                <div class="card-body">
                    <p class="card-text" id = "DitalbelongUnit"></p>
                </div>
            </div>  
            <div class="card detialcard m-2">
                <h5 class="card-header">影片名稱</h5>
                <div class="card-body">
                    <p class="card-text" id = "DitalvideoName"></p>
                </div>
            </div>
            <div class="card detialcard m-2">
                <h5 class="card-header">觀看次數</h5>
                <div class="card-body">
                    <p class="card-text" id = "DitalwatchTime"></p>
                </div>
            </div>
            <div class="card detialcard m-2">
                <h5 class="card-header">影片長度</h5>
                <div class="card-body">
                    <p class="card-text" id = "DitalvideoTime"></p>
                </div>
            </div>      
            <div class="card detialcard m-2">
                <h5 class="card-header">觀看人數</h5>
                <div class="card-body">
                    <p class="card-text" id = "watcherNumber"></p>
                </div>
            </div>       
            <div class="card detialcard m-2">
                <h5 class="card-header">觀看名單</h5>
                <div class="card-body">
                    <table class="table" id = "DitalwatcherList">
        
                    </table>
                </div>
            </div> 

        </div>
        <div id="analyzingDiv" style="display: none">
            <div id = "videoDiv" style="display: none;">
                <div style="width:60vw;display: flex;justify-content: flex-end;">
                    <button class="btn btn-danger mb-1" onclick="$('#videoDiv').hide();stopVideo();">隱藏影片</button>
                </div>
                <div class="mt-2 bg-dark" 
                    style="width: 100%;padding: 1rem;border: 1px solid rgb(194, 194, 194);border-radius: 5px;position: relative;position: relative; height:36.5vw; width:60vw;">
                    <div id="video">
                        <div id="player" class="w-100">
                        </div>
                    </div>
                </div>
            </div>
            <div class="mt-2" id="chartDiv"
                style="width: 100%;padding: 1rem;border: 1px solid rgb(194, 194, 194);border-radius: 5px;position: relative;position: relative; height:auto; width:60vw ;">
                <h5>影片行為分佈圖</h5>
                <div style="height: 4rem;width: 100%;display: flex;justify-content: start;">
                    <p id="viewer" style="margin-right: 3rem">觀看人數：</p>
                    <p id="videoTime1">影片長度：</p>
                </div>
                <canvas id="myChart" style="width: 100px"></canvas>
            </div>
            <div class="mt-2" id="resentViewChartDiv"
                style="width: 100%;padding: 1rem;border: 1px solid rgb(194, 194, 194);border-radius: 5px;position: relative;position: relative; height:auto; width:60vw ;">
                <h5 class="p-0 mt-2">最近觀看人數</h5>
                <canvas id="resentViewChart" style="width: 100px"></canvas>
            </div>
        </div>

        <div id = "commentDiv" style="display: none;padding: 1rem 0">
        </div>
    </div>
</div>
<!-- 讓圖表可以被放大和滾動 -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.21.0/moment.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@0.7.0"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js"></script>


<script>
    $(document).ready(function () {
        $('[data-toggle="tooltip"]').tooltip();
    });
    //顯示影片詳細資訊
    let showVideoDetial = function(videoID){
        let analyzingDiv = document.getElementById('analyzingDiv');
        let commentDiv = document.getElementById('commentDiv');
        let videDitalDiv =document.getElementById('videDitalDiv');
        analyzingDiv.style.display = "none";
        commentDiv.style.display = "none";
        $.ajax({
            url: '/api/getVideoDetial/' + videoID,
            type: 'GET',
            beforeSend: function () {
                let loader = document.getElementById('line-loader');
                loader.style.display = "block"
            },
            complete: function () {
                let loader = document.getElementById('line-loader');
                loader.style.display = "none"
            },
            error: function (error) {
                alert(error.error);
            },
            success: function (response) {
                response = JSON.parse(response);
                $("#DitalvideoName").text(response[0].videoName)
                $("#DitalwatchTime").text(response[0].videoWatchTime+"次")
                $("#DitalvideoTime").text(response[0].videoTime+"秒")
                let DitalwatcherList = document.getElementById('DitalwatcherList')
                DitalwatcherList.innerHTML = `
                <thead>
                    <tr>
                        <th scope="col">姓名</th>
                        <th scope="col">帳號</th>
                        <th scope="col" class="notDisplayInSmallScreen">信箱</th>
                        <th scope="col" class="notDisplayInSmallScreen">學校</th>
                        <th scope="col" class="notDisplayInSmallScreen">科系</th>
                        <th scope="col" class="notDisplayInSmallScreen">學號</th>
                    </tr>
                </thead>
                `;
                for(let i = 0;i<response[1].length;i++){
                    DitalwatcherList.innerHTML+=`
                    <tbody>
                        <tr>
                        <td>${response[1][i].name}</td>
                        <td>${response[1][i].username}</td>
                        <td class="notDisplayInSmallScreen">${response[1][i].email}</td>
                        <td class="notDisplayInSmallScreen">${response[1][i].schoolname}</td>
                        <td class="notDisplayInSmallScreen">${response[1][i].department}</td>
                        <td class="notDisplayInSmallScreen">${response[1][i].studentid}</td>
                        </tr>
                    </tbody>
                    `
                } 

                $("#DitalbelongUnit").text(response[2].unitName)
                $("#DitalbelongClass").text(response[3].className)
                $("#watcherNumber").text(response[0].watchersNumber+"人")
                console.log(response);
                videDitalDiv.style.cssText = "display:flex;flex-wrap:wrap;align-items: flex-start;width:60vw"
                
            }
        })
    }
    //使用者按下數據分析時
    let analyseData = function (videoID) {
        let analyzingDiv = document.getElementById('analyzingDiv');
        let commentDiv = document.getElementById('commentDiv');
        let videDitalDiv =document.getElementById('videDitalDiv');
        commentDiv.style.display = "none";
        videDitalDiv.style.display = "none";
        $.ajax({
            url: '/api/getVideoInfo/' + videoID,
            type: 'GET',
            beforeSend: function () {
                let loader = document.getElementById('line-loader');
                loader.style.display = "block"
            },
            complete: function () {
                let loader = document.getElementById('line-loader');
                loader.style.display = "none"
            },
            error: function (error) {
                alert(error.error);
            },
            success: function (response) {
                response = JSON.parse(response);
                console.log(response)
                showVideoDistribution(response); //顯示影片在不同秒數所做的播放，暫停，快轉等動作
                showVideoResentView(response); //顯示影片最近觀看紀錄
                analyzingDiv.style.display = "block";
            }
        })
    }
    //使用者按下留言時
    let showComment = function(videoID){
        let analyzingDiv = document.getElementById('analyzingDiv');
        let commentDiv = document.getElementById('commentDiv');
        let videDitalDiv =document.getElementById('videDitalDiv');
        analyzingDiv.style.display = "none";
        videDitalDiv.style.display = "none";
        $.ajax({
            url: '/api/getVideoComment/' + videoID,
            type: 'GET',
            beforeSend: function () {
                let loader = document.getElementById('line-loader');
                loader.style.display = "block"
            },
            complete: function () {
                let loader = document.getElementById('line-loader');
                loader.style.display = "none"
            },
            error: function (error) {
                alert(error.error);
            },
            success: function (response) {
                response = JSON.parse(response);
                console.log(response)
                commentDiv.innerHTML = ""
                commentDiv.style.display = "block";
                if(response.comments.length == 0){
                    commentDiv.innerHTML+=`<div style="margin-top:1rem;display:flex;justify-content:center"><p style="font-size:24px">還沒有留言喔！</p></div>`
                }else{
                    for(let i = 0 ;i<response.comments.length;i++){
                        commentDiv.innerHTML+=`
                        <div class="commentDiv" style="display: flex;height: 5.5rem;border-bottom: 1px solid rgb(221, 221, 221);padding: 1rem 0 0 0 ">
                            <div class="commentImg" style="border-radius: 50%;overflow: hidden;width:3rem;height:3rem;margin-top:0.5rem">
                                <img src="https://yt3.ggpht.com/-CBF2tecsmtc/AAAAAAAAAAI/AAAAAAAAAAA/M_OS_rctlaE/s76-c-k-no-mo-rj-c0xffffff/photo.jpg" style="height: 3rem;" alt="">
                            </div>
                            <div style="display: flex;flex-direction: column;justify-content: space-around;padding: 0.6rem">
                                <div>
                                    <span class="badge badge-dark">${response.comments[i].userName}</span>
                                </div>
                                <p style="padding: 0;margin: 0">${response.comments[i].body}</p>
                            </div>
                        </div>
                        `
                    }
                }   
            }
        })
    }

    //顯示影片在不同秒數所做的播放，暫停，快轉等動作
    let showVideoDistribution = function (response) {
        let viewer = document.getElementById('viewer');
        let videoTime = document.getElementById('videoTime1');
        viewer.innerHTML = `觀看次數：${response.behaviors.length}`
        videoTime.innerHTML = `影片長度：${parseInt(response.videoinfo.vtime)-1}秒`

        let videoTimeLine = []; //每一秒代表陣列中的一格
        let behaviorRecord = response.behaviors;
        console.log("behaviorRecord = "+behaviorRecord);
        for (let k = 0; k < parseInt(response.videoinfo.vtime); k++) {
            videoTimeLine[k] = {
                start: 0,
                play: 0,
                fastforward: 0,
                reverse: 0,
                pause: 0,
                close: 0,
                note:0
            }
        }
        for (let i = 0; i < behaviorRecord.length; i++) { //跑過每一比看影片行為記錄
            //console.log(behaviorRecord[i]);
            let videoActions = behaviorRecord[i].videoActions;
            for (let j = 0; j < videoActions.length; j++) { //跑過每一筆紀錄中的動作
                //console.log(videoActions[j].split(":"));
                for (let k = 0; k < parseInt(response.videoinfo.vtime); k++) { //跑過每一秒
                    let thisAction = videoActions[j].split(":")
                    let nextAction;
                    if (j < videoActions.length - 1) {
                        nextAction = videoActions[j + 1].split(":")
                    } else {
                        nextAction = false
                    }
                    if (thisAction[1] == k) { //在這一秒發生
                        if (thisAction[0] == '0') {
                            videoTimeLine[k].start += 1
                        } else if (thisAction[0] == 'fastTurn') {
                            if (parseInt(thisAction[1]) > parseInt(thisAction[2])) {
                                videoTimeLine[k].reverse += 1
                            } else {
                                videoTimeLine[k].fastforward += 1
                            }
                        } else if (thisAction[0] == 'pause') {
                            videoTimeLine[k].pause += 1
                        } else if (thisAction[0] == 'close') {
                            videoTimeLine[k].close += 1
                        } else if (thisAction[0] == 'note') {
                            videoTimeLine[k].note += 1
                        } else if (thisAction[0] == 'play') {
                            //console.log("play");

                            //console.log(thisAction);
                            //console.log(nextAction);
                            if (nextAction != false) {
                                //console.log("have next");
                                let start = null
                                let end = null
                                if (parseInt(nextAction[1]) > parseInt(thisAction[1])) {
                                    end = parseInt(nextAction[1])
                                    start = parseInt(thisAction[1])
                                }
                                //console.log(start);
                                //console.log(end);
                                if (start != null && end != null) {
                                    for (let q = start; q <= end; q++) {
                                        videoTimeLine[q].play += 1
                                        //console.log(q,videoTimeLine[q]);

                                    }
                                }
                            }
                        }
                    }
                }
            }

        }
        let start = [];
        let fastforward = []
        let reverse = []
        let pause = []
        let close = []
        let play = []
        let label = []
        let note = []
        //console.log(videoTimeLine);

        for (let i = 0; i < videoTimeLine.length; i++) {
            start[i] = videoTimeLine[i].start;
            fastforward[i] = videoTimeLine[i].fastforward;
            reverse[i] = videoTimeLine[i].reverse;
            pause[i] = videoTimeLine[i].pause;
            close[i] = videoTimeLine[i].close;
            play[i] = videoTimeLine[i].play;
            note[i] = videoTimeLine[i].note;
            label[i] = i
        }
        //console.log(start,fastforward,reverse,pause,close,note);
        var ctx = document.getElementById('myChart').getContext('2d');
        var chart = new Chart(ctx, {
            // The type of chart we want to create
            type: 'line',
            // The data for our dataset
            data: {
                labels: label,
                datasets: [{
                        label: '開始',
                        fill:false,
                        backgroundColor: 'rgb(144, 196,117)',
                        borderColor: 'rgb(144, 196,117)',
                        data: start
                    },
                    {
                        label: '結束',
                        fill:false,
                        backgroundColor: 'rgb(242, 62, 92)',
                        borderColor: 'rgb(242, 62, 92)',
                        data: close
                    },
                    {
                        label: '快轉',
                        fill:false,
                        backgroundColor: 'rgb(173, 191, 234)',
                        borderColor: 'rgb(173, 191, 234)',
                        data: fastforward
                    },
                    {
                        label: '倒轉',
                        fill:false,
                        backgroundColor: 'rgb(214, 211, 173)',
                        borderColor: 'rgb(214, 211, 173)',
                        data: reverse
                    },
                    {
                        label: '暫停',
                        fill:false,
                        backgroundColor: 'rgb(60, 39, 247)',
                        borderColor: 'rgb(60, 39, 247)',
                        data: pause
                    },
                    {
                        label: '播放',
                        fill:false,
                        backgroundColor: 'rgb(173, 242, 167)',
                        borderColor: 'rgb(173, 242, 167)',
                        data: play
                    },
                    {
                        label: '筆記',
                        fill:false,
                        backgroundColor: 'rgb(0, 0, 0)',
                        borderColor: 'rgb(0, 0, 0)',
                        data: note
                    }
                ]
            },

            // Configuration options go here
            options: {
                pan: {
                    enabled: true,
                    mode: 'x',
                    speed: 10,
                    threshold: 10
                },
                zoom: {
                    enabled: true,
                    mode: 'x',
                    speed: 0.5
                }
            }
        });
        document.getElementById('myChart').onclick = function (evt) {
            var activePoints = chart.getElementsAtEvent(evt);
            //console.log(activePoints[0]);
            
            if(activePoints[0]!=undefined){
                //console.log(activePoints[0]._index);
                showVideo();
                player.pauseVideo();
                player.seekTo(activePoints[0]._index);
                $(".ytp-pause-overlay ytp-scroll-min").remove();
            }
        }
    }


    //顯示最近觀看的條狀圖
    let showVideoResentView = function (response) {
        let behaviors = response.behaviors; //所有觀看影片紀錄
        //console.log(behaviors);
        
        let dateName = []; //所有觀看紀錄的觀看時間存成陣列當作lalbel
        let data = {};

        for (let i = 0; i < behaviors.length; i++) {
            let date = behaviors[i].watchTime.split(" ")[0].split("/");
            //console.log(date);
            
            let time = behaviors[i].watchTime.split(" ")[2];
            let hh = time.split(":")[0]
            let mm = time.split(":")[1]
            time = hh + ":" + mm + ":00"; //把秒數去掉 以分鐘當區隔
            date = new Date(date[2] + '/' + date[1] + '/' + date[0]+ " "+time)
            dateName.push(date)
            if (data[date] != undefined) {
                //表示有存過這天 把次數加一就好
                data[date] += 1
            } else {
                data[date] = 1;
            }
        }
        //console.log(dateName);
        
        
        //console.log(data);

        let t = Object.keys(data)
        let data1 = []
        for (let i = 0; i < t.length; i++) {
            //console.log(t[i]); //t
            //console.log(data[t[i]]); //y
            data1.push({
                x: new Date(t[i]),
                y: data[t[i]]
            })
        }
        //console.log(data1);


        var ctx = document.getElementById('resentViewChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: dateName,
                datasets: [{
                    label: '最近觀看',
                    data: data1,
                    backgroundColor: [
                        'rgba(255, 99, 132, 1)'
                    ],
                    borderColor: [
                        'rgba(255,99,132,1)'
                    ],
                    borderWidth: 5
                }]
            },
            options: {
                scales: {
                    xAxes: [{
                        type: 'time',
                        time: {
                            unit: 'day'
                        },
                        barThickness: 6,
                        distribution: 'linear'
                    }]
                },
                pan: {
                    enabled: true,
                    mode: 'x',
                    speed: 1,
                    threshold: 1
                },
                zoom: {
                    enabled: true,
                    mode: 'x',
                    speed: 0.5
                }
            }
        });

    }


    let showVideo = function () {
        let videoDiv = document.getElementById('videoDiv');
        videoDiv.style.display = 'block';
        let video = document.getElementById('player');
        video.style.cssText = "width:100%;height:100%";
    }
    //影片的部分
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    //console.log(firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;

    function onYouTubeIframeAPIReady() {
        console.log("youtube api ready");

        let width = document.getElementById('videoDiv').clientWidth * 0.96;
        let height = (document.getElementById('videoDiv').clientWidth * 9) / 16;
        //console.log(width);
        //console.log(height);
        player = new YT.Player('player', {
            height: height,
            width: width,
            videoId: "<%=videoinfo.videoURL%>",
            events: {
                'onReady': onPlayerReady,
                'onStateChange': yt.onPlayerStateChange
            },
            playerVars: {
                autoplay: 0,
                controls: 1,
                disablekb: 1,
                modestbranding: 1,
                iv_load_policy: 3,
                modestbranding: 1,
                rel: 0,
                showinfo: 0,
                ecver: 2
                // 'controls': 1, //控制列，0:隱藏，1:顯示(默認)
                // 'fs': 0, //全屏按鈕，0:隱藏，1:顯示(默認)
                // 'iv_load_policy': 3, //影片註釋，1:顯示(默認)，3:不顯示
                // 'rel': 0, //顯示相關視頻，0:不顯示，1:顯示(默認)
                // 'modestbranding': 1, //YouTube標籤，0:顯示(默認)，1:不顯示    
                // 'playsinline': 1 //在iOS的播放器中全屏播放，0:全屏(默認)，1:內嵌
            }
        });
        //console.log(document.getElementById('player'));
    }





    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {

    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;


    function stopVideo() {
        player.stopVideo();
    }
</script>
<% include layout/nobottom-footer %>